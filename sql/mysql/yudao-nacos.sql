/*
 Navicat Premium Data Transfer

 Source Server         : 本机
 Source Server Type    : MySQL
 Source Server Version : 80032 (8.0.32)
 Source Host           : localhost:3306
 Source Schema         : yudao-nacos

 Target Server Type    : MySQL
 Target Server Version : 80032 (8.0.32)
 File Encoding         : 65001

 Date: 01/03/2023 19:43:14
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for config_info
-- ----------------------------
DROP TABLE IF EXISTS `config_info`;
CREATE TABLE `config_info` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL,
  `content` longtext CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8mb3 COLLATE utf8mb3_bin COMMENT 'source user',
  `src_ip` varchar(20) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'source ip',
  `app_name` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT '' COMMENT '租户字段',
  `c_desc` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL,
  `c_use` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL,
  `effect` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL,
  `type` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL,
  `c_schema` text CHARACTER SET utf8mb3 COLLATE utf8mb3_bin,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1085 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin COMMENT='config_info';

-- ----------------------------
-- Records of config_info
-- ----------------------------
BEGIN;
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (1, 'application-dev.yml', 'DEFAULT_GROUP', '# 配置文件加密根密码\njasypt:\n  encryptor:\n    password: loong\n    algorithm: loong\n    iv-generator-classname: org.jasypt.iv.NoIvGenerator\n\nspring:\n  mvc:\n    pathmatch:\n      matching-strategy: ant_path_matcher\n  redis:\n    host: loong-redis\n    password: zhang8324761\n  servlet:\n    multipart:\n      max-file-size: 100MB\n      max-request-size: 100MB\n  cloud:\n    sentinel:\n      eager: true\n      filter:\n        enabled: false\n      transport:\n        dashboard: loong-sentinel:5020\n\n# 端点对外暴露\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'          \n  endpoint:\n    restart:\n      enabled: true\n    health:\n      show-details: ALWAYS\n# feign 相关配置\nfeign:\n  sentinel:\n    enabled: true\n  okhttp:\n    enabled: true\n  httpclient:\n    enabled: false\n  client:\n    config:\n      default:\n        connectTimeout: 20000\n        readTimeout: 20000\n  compression:\n    request:\n      enabled: true\n    response:\n      enabled: true\n\n#开启灰度\ngray:\n  rule:\n    enabled: true\n\n# mybatis-plus 配置\nmybatis-plus:\n  tenant-enable: ture\n  mapper-locations: classpath:/mapper/*Mapper.xml\n  global-config:\n    capitalMode: true\n    banner: false\n    db-config:\n      id-type: auto\n      select-strategy: not_empty\n      insert-strategy: not_empty\n      update-strategy: not_empty\n  type-handlers-package:  com.loong.loong.common.data.handler\n  configuration:\n    jdbc-type-for-null: \'null\'\n    call-setters-on-nulls: true\n# swagger 全局配置\nknife4j:\n  enable: true\nswagger:\n  enabled: true\n  title: loong Swagger API\n  license: Powered By loong\n  licenseUrl: https://longxinyu.love\n  terms-of-service-url: https://longxinyu.love\n  contact:\n    email: 1127152834@qq.com\n    url: https://longxinyu.love/about.html\n  authorization:\n    name: oauth2\n    auth-regex: ^.*$\n    authorization-scope-list:\n      - scope: server\n        description: server all\n    token-url-list:\n      - http://${GATEWAY_HOST:loong-gateway}:${GATEWAY_PORT:9999}/auth/oauth/token\n\n# oauth2 资源服务器相关配置\nsecurity:\n  oauth2:\n    client:\n      ignore-urls:\n        - /css/**\n        - /error\n        - /actuator/**\n        - /v2/api-docs\n    resource:\n      loadBalanced: true\n      token-info-uri: http://loong-auth/oauth/check_token', 'a3a9f10028f691f8525d059c62751a8d', '2019-04-18 02:10:20', '2022-08-20 11:23:47', 'nacos', '171.113.105.115', '', '', '通用配置文件', 'null', 'null', 'yaml', 'null');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (2, 'loong-auth-dev.yml', 'DEFAULT_GROUP', '# 数据源\nspring:\n  freemarker:\n    allow-request-override: false\n    allow-session-override: false\n    cache: true\n    charset: UTF-8\n    check-template-location: true\n    content-type: text/html\n    enabled: true\n    expose-request-attributes: false\n    expose-session-attributes: false\n    expose-spring-macro-helpers: true\n    prefer-file-system-access: true\n    suffix: .ftl\n    template-loader-path: classpath:/templates/', '74f53b71c7799aa754da75662378b93c', '2019-04-18 02:11:32', '2021-05-07 23:40:38', NULL, '10.1.1.143', '', '', '认证中心配置文件', 'null', 'null', 'yaml', 'null');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (3, 'loong-codegen-dev.yml', 'DEFAULT_GROUP', '## spring security 配置\nsecurity:\n  oauth2:\n    client:\n      client-id: loong\n      client-secret: loong\n      scope: server\n# 数据源\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    druid:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      username: ${MYSQL_USER:root}\n      password: ${MYSQL_PWD:Zhang@8324761}\n      url: jdbc:mysql://${MYSQL_HOST:loong-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:longxinyu_codegen}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  resources:\n    static-locations: classpath:/static/,classpath:/views/\n\n# 租户表维护\nloong:\n  tenant:\n    column: tenant_id\n    tables:\n      - gen_datasource_conf\n      - gen_form_conf', '649d6e3efad0f528236f35d07902a54d', '2019-04-18 02:12:10', '2022-08-18 19:18:59', 'febs', '0:0:0:0:0:0:0:1', '', '', '代码生成', 'null', 'null', 'yaml', 'null');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (4, 'loong-daemon-elastic-job-dev.yml', 'DEFAULT_GROUP', '## spring security 配置\nsecurity:\n  oauth2:\n    client:\n      client-id: loong\n      client-secret: loong\n      scope: server\n## 定时任务\n# 数据源\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    druid:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      username: ${MYSQL_USER:root}\n      password: ${MYSQL_PWD:Zhang@8324761}\n      url: jdbc:mysql://${MYSQL_HOST:loong-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:longxinyu_job}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true', '107b07929b1a3914ae1437e3b193d186', '2019-04-18 02:12:57', '2022-08-18 19:19:44', 'febs', '0:0:0:0:0:0:0:1', '', '', '定时任务-elastic-job配置', 'null', 'null', 'yaml', 'null');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (5, 'loong-gateway-dev.yml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    gateway:\n      globalcors:\n        corsConfigurations:\n          \'[/**]\':\n            allowedOriginPatterns: \"*\"\n            allowed-methods: \"*\"\n            allowed-headers: \"*\"\n            allow-credentials: true\n            exposedHeaders: \"Content-Disposition,Content-Type,Cache-Control\"\n      default-filters:\n        - DedupeResponseHeader=Vary Access-Control-Allow-Origin Access-Control-Allow-Credentials, RETAIN_FIRST\n\ngateway:\n  encode-key: \'longlonglonglong\'\n\nswagger:\n  ignore-providers:\n    - loong-monitor\n    - loong-auth\n    - loong-tx-manager\n\nribbon:\n  rule:\n    gray-enabled: true\n\n# 验证码相关配置参考： http://t.cn/A647jEdu\naj:\n  captcha:\n    cache-type: redis\n    water-mark: loong', '1f47a11abc81e488efb3268ed7696e98', '2019-04-18 02:13:52', '2022-08-28 19:54:18', 'nacos', '171.113.103.170', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (6, 'loong-monitor-dev.yml', 'DEFAULT_GROUP', 'spring:\n  # 安全配置\n  security:\n    user:\n      name: loong     # loong\n      password: loong # loong\n  autoconfigure:\n    exclude: com.loong.loong.common.core.config.JacksonConfiguration\n  boot:\n    admin:\n      ui:\n        title: \'loong 服务状态监控\'\n        brand: \'loong 服务状态监控\'\n        external-views:\n          - label: \"SQL监控\"\n            url: /druid/sql.html\n            order: 2000\n            iframe: true\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  endpoint:\n    health:\n      show-details: ALWAYS  #显示详细信息\n\n\n# druid 监控的服务\nmonitor:\n  applications:\n    - loong-upms-biz\n    - loong-pay-platform\n', '032e124bfd05eec45126bd0a1495c833', '2019-04-18 02:14:17', '2022-08-18 19:20:53', 'febs', '0:0:0:0:0:0:0:1', '', '', '监控配置文件', 'null', 'null', 'yaml', 'null');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (7, 'loong-upms-biz-dev.yml', 'DEFAULT_GROUP', '## spring security 配置\nsecurity:\n  oauth2:\n    client:\n      client-id: loong\n      client-secret: loong\n      scope: server\n      ignore-urls:\n        - /error\n        - /druid/**\n        - /actuator/**\n        - /v2/api-docs\n\n# 数据源\nspring:\n  autoconfigure:\n    exclude: org.springframework.cloud.gateway.config.GatewayAutoConfiguration,org.springframework.cloud.gateway.config.GatewayClassPathWarningAutoConfiguration\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    druid:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      username: ${MYSQL_USER:root}\n      password: ${MYSQL_PWD:Zhang@8324761}\n      url: jdbc:mysql://${MYSQL_HOST:loong-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:longxinyu}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n      stat-view-servlet:\n        enabled: true\n        allow: \"\"\n        url-pattern: /druid/*\n        #login-username: admin\n        #login-password: admin\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true\n          slow-sql-millis: 10000\n          merge-sql: false\n        wall:\n          config:\n            multi-statement-allow: true\n\n# 文件系统 (minio测试环境，不可当生产使用)\noss:\n  endpoint: http://loong-minio:9000\n  access-key: loong\n  secret-key: zhang8324761\n  bucket-name: loong\n\n# Logger Config\nlogging:\n  level:\n    com.loong.loong.admin.mapper: debug\n\n# 租户表维护\nloong:\n  tenant:\n    column: tenant_id\n    tables:\n      - sys_user\n      - sys_role\n      - sys_menu\n      - sys_dept\n      - sys_log\n      - sys_social_details\n      - sys_dict\n      - sys_dict_item\n      - sys_public_param\n      - sys_log\n      - sys_file\n      - sys_oauth_client_details ', 'c978c3577b796dbac8fb26110e4a5fcd', '2019-04-18 02:32:44', '2022-08-20 15:33:51', 'nacos', '171.113.105.115', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (8, 'loong-tx-manager-dev.yml', 'DEFAULT_GROUP', '# 页面配置\nspring:\n  mvc:\n    static-path-pattern: /**\n  resources:\n    static-locations: classpath:/static/\n\n\n# LCN 配置\ntm:\n  transaction:\n    netty:\n      delaytime: 5   # 客户端链接最大通讯时间 （秒）\n      hearttime: 15  # 客户端心跳时间   （秒）\n  redis:\n    savemaxtime: 30  # redis 保存时间  （秒）\n  socket:\n    port: 9998       # 通讯端口\n    maxconnection: 1000  #最大链接数\n  compensate:\n    auto: false   #是否自动补偿\n    notifyUrl: http://ip:port/path #补偿结果通知（配消息总线里面）\n    tryTime: 30     # z再次重试时间间隔\n    maxWaitTime: 5000   # 请求超时的最大时间 (毫秒)', '885f5c125f2df7a08692929ccce154be', '2019-04-18 02:54:03', '2019-04-18 02:54:03', NULL, '127.0.0.1', '', '', '分布式事务协调模块', NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (9, 'loong-daemon-quartz-dev.yml', 'DEFAULT_GROUP', '## spring security 配置\nsecurity:\n  oauth2:\n    client:\n      client-id: loong\n      client-secret: loong\n      scope: server\n\n# 数据源\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    druid:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      username: ${MYSQL_USER:root}\n      password: ${MYSQL_PWD:Zhang@8324761}\n      url: jdbc:mysql://${MYSQL_HOST:loong-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:longxinyu_job}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  resources:\n    static-locations: classpath:/static/,classpath:/views/\n  quartz:\n    #相关属性配置\n    properties:\n      org:\n        quartz:\n          scheduler:\n            instanceName: clusteredScheduler\n            instanceId: AUTO\n          jobStore:\n            class: org.springframework.scheduling.quartz.LocalDataSourceJobStore\n            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n            tablePrefix: QRTZ_\n            isClustered: true\n            clusterCheckinInterval: 10000\n            useProperties: false\n          threadPool:\n            class: org.quartz.simpl.SimpleThreadPool\n            threadCount: 50\n            threadPriority: 5\n            threadsInheritContextClassLoaderOfInitializingThread: true\n    #数据库方式\n    job-store-type: jdbc\n    #初始化表结构\n    #jdbc:\n    #initialize-schema: never\n\n', 'a248efbc9f95e4cf73a978ef38acf9f7', '2019-04-18 03:08:34', '2022-08-18 19:23:58', 'febs', '0:0:0:0:0:0:0:1', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (10, 'loong-pay-platform-dev.yml', 'DEFAULT_GROUP', '## spring security 配置\nsecurity:\n  oauth2:\n    client:\n      client-id: loong\n      client-secret: loong\n      scope: server\n      ignore-urls:\n        - /druid/**\n        - /error\n        - /actuator/**\n        - /v2/api-docs\n# 数据源\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    druid:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      username: ${MYSQL_USER:root}\n      password: ${MYSQL_PWD:Zhang@8324761}\n      url: jdbc:mysql://${MYSQL_HOST:loong-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:longxinyu_pay}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  freemarker:\n    allow-request-override: false\n    allow-session-override: false\n    cache: true\n    charset: UTF-8\n    check-template-location: true\n    content-type: text/html\n    enabled: true\n    expose-request-attributes: false\n    expose-session-attributes: false\n    expose-spring-macro-helpers: true\n    prefer-file-system-access: true\n    suffix: .ftl\n    template-loader-path: classpath:/templates/\n# 租户表维护\nloong:\n  pay:\n    test: loong\n    aliPayConfig:\n      expire-time: 30\n      return-url: http://longxinyu.love\n      notify-url: http://wechat.loong.top/pay/notify/ali/callbak\n    wxPayConfig:\n      notify-url: https://admin.pig4cloud.com/pay/notify/wx/callbak\n    mergePayConfig:\n      return-url: http://longxinyu.love\n      notify-url: http://wechat.loong.top/pay/notify/merge/callbak\n  xsequence:    #发号器相关配置\n    db:\n      retry-times: 3\n      table-name: pay_sequence\n  tenant:\n    column: tenant_id\n    tables:\n      - pay_channel\n      - pay_trade_order\n      - pay_goods_order\n      - pay_notify_record', 'f0f7125f1d14f7268683e9832cb12307', '2019-05-28 11:46:27', '2022-08-18 19:26:24', 'febs', '0:0:0:0:0:0:0:1', '', '', '支付模块配置', 'null', 'null', 'yaml', 'null');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (11, 'loong-oa-platform-dev.yml', 'DEFAULT_GROUP', '## spring security 配置\nsecurity:\n  oauth2:\n    client:\n      client-id: loong\n      client-secret: loong\n      scope: server\n      ignore-urls:\n        - \'/actuator/**\'\n        - \'/v2/api-docs\'\n        - \'/editor-app/**\'\n        - \'/modeler.html\'\n        \nspring:\n  autoconfigure:\n    exclude: org.activiti.spring.boot.SecurityAutoConfiguration\n  activiti:\n    check-process-definitions: false\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    druid:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      username: ${MYSQL_USER:root}\n      password: ${MYSQL_PWD:Zhang@8324761}\n      url: jdbc:mysql://${MYSQL_HOST:loong-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:longxinyu_ac}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n\n# 租户表维护\nloong:\n  tenant:\n    column: tenant_id\n    tables:\n      - oa_leave_bill', '0263b6a3bb95088dee45375854c945c7', '2019-10-16 16:38:52', '2022-08-18 19:26:53', 'febs', '0:0:0:0:0:0:0:1', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (12, 'loong-mp-platform-dev.yml', 'DEFAULT_GROUP', '## spring security 配置\nsecurity:\n  oauth2:\n    client:\n      client-id: loong\n      client-secret: loong\n      scope: server\n# 数据源\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    druid:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      username: ${MYSQL_USER:root}\n      password: ${MYSQL_PWD:Zhang@8324761}\n      url: jdbc:mysql://${MYSQL_HOST:loong-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:longxinyu_mp}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  resources:\n    static-locations: classpath:/static/,classpath:/views/\n\n\n# 租户表维护\nloong:\n  tenant:\n    column: tenant_id\n    tables:\n      - wx_mp_menu\n      - wx_account\n      - wx_account_tag\n      - wx_account_fans\n      - wx_msg\n      - wx_auto_reply', '44b24d8e589d680bd97e85f3c33c364e', '2019-10-21 08:58:24', '2022-08-18 19:27:21', 'febs', '0:0:0:0:0:0:0:1', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (13, 'loong-bi-platform-dev.yml', 'DEFAULT_GROUP', 'spring:\n  # 安全配置\n  security:\n    user:\n      name: loong     # loong\n      password: loong # loong\n      \n# ureport 报表相关设置\nureport:\n  debug: false\n  disableFileProvider: true\n  disableHttpSessionReportCache: true\n\n# oss 保存报表设计文件\noss:\n  bucket-name: loong\n  access-key: loong\n  secret-key: loong\n  endpoint: http://localhost:9001', '5e99769ee85bf23fe7abca03be806bbc', '2020-10-15 18:18:13', '2022-08-18 19:27:58', 'febs', '0:0:0:0:0:0:0:1', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (14, 'loong-xxl-job-admin-dev.yml', 'DEFAULT_GROUP', '# xxl\nxxl:\n  job:\n    i18n: zh_CN\n    logretentiondays: 30\n    triggerpool:\n      fast.max: 200\n      slow.max: 200\n\n# mybatis\nmybatis:\n  mapper-locations: classpath:/mybatis-mapper/*Mapper.xml\n\n# spring\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: ${MYSQL_USER:root}\n    password: ${MYSQL_PWD:Zhang@8324761}\n    url: jdbc:mysql://${MYSQL_HOST:loong-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:loong_job}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  mvc:\n    static-path-pattern: /static/**\n  freemarker:\n    suffix: .ftl\n    request-context-attribute: request\n    settings:\n      number_format: 0.##########\n  mail:\n    host: smtp.mxhichina.com\n    port: 465\n    from: xxxx@gitee.wang\n    username: xxxx@gitee.wang\n    password: xxxx\n    properties:\n      mail:\n        smtp:\n          auth: true\n          ssl.enable: true\n          starttls.enable: false\n          required: false\n# spring boot admin 配置\n\nmanagement:\n  health:\n    mail:\n      enabled: false\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  endpoint:\n    health:\n      show-details: ALWAYS', 'c354be2e85d1261de062f119915fe0c8', '2021-07-21 20:45:02', '2022-08-18 19:29:53', 'febs', '0:0:0:0:0:0:0:1', '', '', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (15, 'loong-report-platform-dev.yml', 'DEFAULT_GROUP', 'spring:\n  messages:\n    basename: i18n/messages\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    druid:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      username: ${MYSQL_USER:root}\n      password: ${MYSQL_PWD:Zhang@8324761}\n      url: jdbc:mysql://${MYSQL_HOST:loong-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:longxinyu_report}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\nmybatis-plus:\n  configuration:\n    call-setters-on-nulls: true\n  mapperLocations:\n    - classpath*:/mapper/**/*.xml\n    - classpath*:/modeler-mybatis-mappings/**/*.xml\n\n  \n# 本应用自定义参数\ncustomer:\n  file:\n    #上传对应本地全路径\n    dist-path: /Users/loong/Downloads/file/\n    white-list: .png|.jpg|.gif|.icon|.pdf|.xlsx|.xls|.csv|.mp4|.avi\n    excelSuffix: .xlsx|.xls|.csv\n    downloadPath: http://127.0.0.1:9095/file/download\n', '214a62edbbfa26bfde419df152962628', '2021-11-05 09:13:54', '2022-08-18 19:30:49', 'febs', '0:0:0:0:0:0:0:1', '', '', '大屏设计模块配置文件', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (1048, 'xxl-job.yml', 'DEFAULT_GROUP', '# xxl\nxxl:\n  job:\n    i18n: zh_CN\n    logretentiondays: 30\n    triggerpool:\n      fast.max: 200\n      slow.max: 200\n\n# mybatis\nmybatis:\n  mapper-locations: classpath:/mybatis-mapper/*Mapper.xml\n\n# spring\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: ${MYSQL_USER:root}\n    password: ${MYSQL_PWD:Zhang@8324761}\n    url: jdbc:mysql://localhost:3306/yudao_job?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  mvc:\n    static-path-pattern: /static/**\n  freemarker:\n    suffix: .ftl\n    request-context-attribute: request\n    settings:\n      number_format: 0.##########\n  mail:\n    host: smtp.mxhichina.com\n    port: 465\n    from: xxxx@gitee.wang\n    username: xxxx@gitee.wang\n    password: xxxx\n    properties:\n      mail:\n        smtp:\n          auth: true\n          ssl.enable: true\n          starttls.enable: false\n          required: false\n# spring boot admin 配置\n\nmanagement:\n  health:\n    mail:\n      enabled: false\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  endpoint:\n    health:\n      show-details: ALWAYS', '197959c611fedd17e622344362e3ed6a', '2023-02-25 08:48:09', '2023-02-25 08:52:27', 'nacos', '0:0:0:0:0:0:0:1', '', '6258af5a-494e-412b-b0ab-fe79853a9f35', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (1050, 'infra-server-local.yaml', 'DEFAULT_GROUP', '# 基本配置\nspring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n#################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: infra-server # TODO 一定要写么？\n\n#################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      #      function:\n      #        definition: roleRefreshConsumer;roleMenuRefreshConsumer;userRoleRefreshConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        roleRefresh-out-0:\n          destination: system_role_refresh\n        roleRefreshConsumer-in-0:\n          destination: system_role_refresh\n          group: system_role_refresh_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: infra_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n#################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n#################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.infra\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  codegen:\n    base-package: cn.iocoder.yudao\n    db-schemas: ${spring.datasource.dynamic.datasource.master.name}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.infra.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n    ignore-urls:\n      - /admin-api/infra/file/*/get/** # 获取图片，和租户无关\n    ignore-tables:\n      - infra_codegen_column\n      - infra_codegen_table\n      - infra_test_demo\n      - infra_config\n      - infra_file_config\n      - infra_file\n      - infra_file_content\n      - infra_job\n      - infra_job_log\n      - infra_job_log\n      - infra_data_source_config\n\ndebug: false\n\n#################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n        slave: # 模拟从库，可根据自己需要修改 # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码\n    database: 1 # 数据库索引\n#    password: 123456 # 密码，建议生产环境开启\n\n#################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n#################### 定时任务相关配置 ####################\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9090/xxl-job-admin # 调度中心部署跟地址\n\n#################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n#################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n      # Spring Boot Admin Server 服务端的相关配置\n      context-path: /admin # 配置 Spring\n\n#################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  demo: false # 开启演示模式', '94bd33f737057a99a8fd0060580fb0a7', '2023-02-25 09:07:19', '2023-02-25 09:07:19', NULL, '0:0:0:0:0:0:0:1', '', '6258af5a-494e-412b-b0ab-fe79853a9f35', '基础设施与研发工具服务', NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (1052, 'infra-server-local.yaml', 'DEFAULT_GROUP', '# 基本配置\nspring:\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: infra-server # TODO 一定要写么？\n\n--- #################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      #      function:\n      #        definition: roleRefreshConsumer;roleMenuRefreshConsumer;userRoleRefreshConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        roleRefresh-out-0:\n          destination: system_role_refresh\n        roleRefreshConsumer-in-0:\n          destination: system_role_refresh\n          group: system_role_refresh_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: infra_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.infra\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  codegen:\n    base-package: cn.iocoder.yudao\n    db-schemas: ${spring.datasource.dynamic.datasource.master.name}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.infra.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n    ignore-urls:\n      - /admin-api/infra/file/*/get/** # 获取图片，和租户无关\n    ignore-tables:\n      - infra_codegen_column\n      - infra_codegen_table\n      - infra_test_demo\n      - infra_config\n      - infra_file_config\n      - infra_file\n      - infra_file_content\n      - infra_job\n      - infra_job_log\n      - infra_job_log\n      - infra_data_source_config\n\ndebug: false\n\n--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码\n    database: 0 # 数据库索引\n#    password: 123456 # 密码，建议生产环境开启\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9080/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n      # Spring Boot Admin Server 服务端的相关配置\n      context-path: /admin # 配置 Spring\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.infra.dal.mysql: debug\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式\n', '635f7161179491204821d10b30527f26', '2023-02-25 09:10:18', '2023-02-25 15:57:47', 'nacos', '0:0:0:0:0:0:0:1', '', 'dev', '基础设施与研发工具服务', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (1059, 'xxl-job-local.yaml', 'DEFAULT_GROUP', '# xxl\nxxl:\n  job:\n    i18n: zh_CN\n    logretentiondays: 30\n    login:\n      username: admin\n      password: admin\n    triggerpool:\n      fast.max: 200\n      slow.max: 200\n    accessToken: default_token\n\n# mybatis\nmybatis:\n  mapper-locations: classpath:/mybatis-mapper/*Mapper.xml\n\n# spring\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: ${MYSQL_USER:root}\n    password: ${MYSQL_PWD:Zhang@8324761}\n    url: jdbc:mysql://localhost:3306/yudao-job?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  mvc:\n    static-path-pattern: /static/**\n  freemarker:\n    suffix: .ftl\n    request-context-attribute: request\n    settings:\n      number_format: 0.##########\n  mail:\n    host: smtp.mxhichina.com\n    port: 465\n    from: xxxx@gitee.wang\n    username: xxxx@gitee.wang\n    password: xxxx\n    properties:\n      mail:\n        smtp:\n          auth: true\n          ssl.enable: true\n          starttls.enable: false\n          required: false\n# spring boot admin 配置\n\nmanagement:\n  health:\n    mail:\n      enabled: false\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  endpoint:\n    health:\n      show-details: ALWAYS', 'f272e4685f8a7f8eff96a7e8259f5f0a', '2023-02-25 09:37:02', '2023-03-01 07:59:02', 'nacos', '0:0:0:0:0:0:0:1', '', 'dev', '分布式定时任务', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (1066, 'system-server-local.yaml', 'DEFAULT_GROUP', 'spring:\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n\n--- #################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      function:\n        definition: smsSendConsumer;mailSendConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        smsSend-out-0:\n          destination: system_sms_send\n        smsSendConsumer-in-0:\n          destination: system_sms_send\n          group: system_sms_send_consumer_group\n        mailSend-out-0:\n          destination: system_mail_send\n        mailSendConsumer-in-0:\n          destination: system_mail_send\n          group: system_mail_send_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: system_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n--- #################### 验证码相关配置 ####################\n\naj:\n  captcha:\n    jigsaw: classpath:images/jigsaw # 滑动验证，底图路径，不配置将使用默认图片；以 classpath: 开头，取 resource 目录下路径\n    pic-click: classpath:images/pic-click # 滑动验证，底图路径，不配置将使用默认图片；以 classpath: 开头，取 resource 目录下路径\n    cache-type: redis # 缓存 local/redis...\n    cache-number: 1000 # local 缓存的阈值,达到这个值，清除缓存\n    timing-clear: 180 # local定时清除过期缓存(单位秒),设置为0代表不执行\n    type: blockPuzzle # 验证码类型 default两种都实例化。 blockPuzzle 滑块拼图 clickWord 文字点选\n    water-mark: 芋道源码 # 右下角水印文字(我的水印)，可使用 https://tool.chinaz.com/tools/unicode.aspx 中文转 Unicode，Linux 可能需要转 unicode\n    interference-options: 0 # 滑动干扰项(0/1/2)\n    req-frequency-limit-enable: false # 接口请求次数一分钟限制是否开启 true|false\n    req-get-lock-limit: 5 # 验证失败5次，get接口锁定\n    req-get-lock-seconds: 10 # 验证失败后，锁定时间间隔\n    req-get-minute-limit: 30 # get 接口一分钟内请求数限制\n    req-check-minute-limit: 60 # check 接口一分钟内请求数限制\n    req-verify-minute-limit: 60 # verify 接口一分钟内请求数限制\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.system\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  captcha:\n    enable: true # 验证码的开关，默认为 true；\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.system.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n    ignore-urls:\n      - /admin-api/system/tenant/get-id-by-name # 基于名字获取租户，不许带租户编号\n      - /admin-api/system/captcha/get-image # 获取图片验证码，和租户无关\n      - /admin-api/system/captcha/get # 获取图片验证码，和租户无关\n      - /admin-api/system/captcha/check # 校验图片验证码，和租户无关\n      - /admin-api/system/sms/callback/* # 短信回调接口，无法带上租户编号\n      - /rpc-api/system/tenant/valid # 防止递归。避免调用 /rpc-api/system/tenant/valid 接口时，又去触发 /rpc-api/system/tenant/valid 去校验\n      - /rpc-api/system/tenant/id-list # 获得租户列表的时候，无需传递租户编号\n      - /rpc-api/system/error-code/* # 错误码的自动创建与下载的接口，无法带上租户编号\n      - /rpc-api/system/oauth2/token/check # 访问令牌校验时，无需传递租户编号；主要解决上传文件的场景，前端不会传递 tenant-id！\n    ignore-tables:\n      - system_tenant\n      - system_tenant_package\n      - system_dict_data\n      - system_dict_type\n      - system_error_code\n      - system_menu\n      - system_sms_channel\n      - system_sms_template\n      - system_sms_log\n      - system_sensitive_word\n      - system_oauth2_client\n      - system_mail_account\n      - system_mail_template\n      - system_mail_log\n      - system_notify_template\n  sms-code: # 短信验证码相关的配置项\n    expire-times: 10m\n    send-frequency: 1m\n    send-maximum-quantity-per-day: 10\n    begin-code: 9999 # 这里配置 9999 的原因是，测试方便。\n    end-code: 9999 # 这里配置 9999 的原因是，测试方便。\n\ndebug: false\n\n--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n#          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n#          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n#          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n#          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n#          username: sa\n#          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n#          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n#          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n#          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n#          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n#          username: sa\n#          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n    # password: zhang8324761 # 密码，建议生产环境开启\n    database: 0 # 数据库索引\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9080/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          prefer-ip: true # 注册实例时，优先使用 IP\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.system.dal.mysql: debug\n\n--- #################### 微信公众号相关配置 ####################\nwx: # 参见 https://github.com/Wechat-Group/WxJava/blob/develop/spring-boot-starters/wx-java-mp-spring-boot-starter/README.md 文档\n  mp:\n    # 公众号配置(必填)\n    app-id: wx041349c6f39b268b\n    secret: 5abee519483bc9f8cb37ce280e814bd0\n    # 存储配置，解决 AccessToken 的跨节点的共享\n    config-storage:\n      type: RedisTemplate # 采用 RedisTemplate 操作 Redis，会自动从 Spring 中获取\n      key-prefix: wx # Redis Key 的前缀 TODO 芋艿：解决下 Redis key 管理的配置\n      http-client-type: HttpClient # 采用 HttpClient 请求微信公众号平台\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  captcha:\n    enable: false # 本地环境，暂时关闭图片验证码，方便登录等接口的测试\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  pay:\n    pay-notify-url: http://niubi.natapp1.cc/api/pay/order/notify\n    pay-return-url: http://niubi.natapp1.cc/api/pay/order/return\n    refund-notify-url: http://niubi.natapp1.cc/api/pay/refund/notify\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式\n\njustauth:\n  enabled: true\n  type:\n    DINGTALK: # 钉钉\n      client-id: dingvrnreaje3yqvzhxg\n      client-secret: i8E6iZyDvZj51JIb0tYsYfVQYOks9Cq1lgryEjFRqC79P3iJcrxEwT6Qk2QvLrLI\n      ignore-check-redirect-uri: true\n    WECHAT_ENTERPRISE: # 企业微信\n      client-id: wwd411c69a39ad2e54\n      client-secret: 1wTb7hYxnpT2TUbIeHGXGo7T0odav1ic10mLdyyATOw\n      agent-id: 1000004\n      ignore-check-redirect-uri: true\n  cache:\n    type: REDIS\n    prefix: \'social_auth_state:\' # 缓存前缀，目前只对 Redis 缓存生效，默认 JUSTAUTH::STATE::\n    timeout: 24h # 超时时长，目前只对 Redis 缓存生效，默认 3 分钟\n', '68c8abb22fdbe89ec533b0f0cc50b736', '2023-02-25 12:17:23', '2023-02-25 15:58:06', 'nacos', '0:0:0:0:0:0:0:1', '', 'dev', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (1069, 'gateway-server-local.yaml', 'DEFAULT_GROUP', 'spring:\n  cloud:\n    # Spring Cloud Gateway 配置项，对应 GatewayProperties 类\n    gateway:\n      # 路由配置项，对应 RouteDefinition 数组\n      routes:\n        - id: system-admin-api # 路由的编号\n          uri: grayLb://system-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/admin-api/system/**\n          filters:\n              - RewritePath=/admin-api/system/v2/api-docs, /v2/api-docs # 配置，保证转发到 /v2/api-docs\n        - id: system-app-api # 路由的编号\n          uri: grayLb://system-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/app-api/system/**\n          filters:\n              - RewritePath=/app-api/system/v2/api-docs, /v2/api-docs\n        - id: infra-admin-api # 路由的编号\n          uri: grayLb://infra-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/admin-api/infra/**\n          filters:\n              - RewritePath=/admin-api/infra/v2/api-docs, /v2/api-docs\n        - id: infra-app-api # 路由的编号\n          uri: grayLb://infra-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/app-api/infra/**\n          filters:\n              - RewritePath=/app-api/infra/v2/api-docs, /v2/api-docs\n        - id: bpm-admin-api # 路由的编号\n          uri: grayLb://bpm-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/admin-api/bpm/**\n          filters:\n              - RewritePath=/admin-api/bpm/v2/api-docs, /v2/api-docs\n        - id: report-admin-api # 路由的编号\n          uri: grayLb://report-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/admin-api/report/**\n          filters:\n            - RewritePath=/admin-api/report/v2/api-docs, /v2/api-docs\n        - id: report-jmreport # 路由的编号（积木报表）\n          uri: grayLb://report-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/jmreport/**\n      x-forwarded:\n        prefix-enabled: false # 避免 Swagger 重复带上额外的 /admin-api/system 前缀\n', '7f6cbc34382466c6b5b73e086a2f8d0b', '2023-02-25 15:05:30', '2023-02-25 15:58:19', 'nacos', '0:0:0:0:0:0:0:1', '', 'dev', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (1070, 'report-server-local.yaml', 'DEFAULT_GROUP', 'spring:\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: report-server # TODO 一定要写么？\n\n--- #################### MQ 消息队列相关配置 ####################\n\n--- #################### 定时任务相关配置 ####################\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.report\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.report.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n\ndebug: false\n\n--- #################### 数据库相关配置 ####################\nspring:\n\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码，建议生产环境开启\n    database: 0 # 数据库索引\n\n--- #################### MQ 消息队列相关配置 ####################\n\n--- #################### 定时任务相关配置 ####################\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.report.dal.mysql: debug\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式\n', '53cc40543b0d586d7d6e9101e225c04d', '2023-02-25 15:23:35', '2023-02-25 15:59:03', 'nacos', '0:0:0:0:0:0:0:1', '', 'dev', '', '', '', 'yaml', '');
INSERT INTO `config_info` (`id`, `data_id`, `group_id`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `app_name`, `tenant_id`, `c_desc`, `c_use`, `effect`, `type`, `c_schema`) VALUES (1071, 'bpm-server-local.yaml', 'DEFAULT_GROUP', 'spring:\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# 工作流 Flowable 配置\nflowable:\n  # 1. false: 默认值，Flowable 启动时，对比数据库表中保存的版本，如果不匹配。将抛出异常\n  # 2. true: 启动时会对数据库中所有表进行更新操作，如果表存在，不做处理，反之，自动创建表\n  # 3. create_drop: 启动时自动创建表，关闭时自动删除表\n  # 4. drop_create: 启动时，删除旧表，再创建新表\n  database-schema-update: true # 设置为 false，可通过 https://github.com/flowable/flowable-sql 初始化\n  db-history-used: true # flowable6 默认 true 生成信息表，无需手动设置\n  check-process-definitions: false # 设置为 false，禁用 /resources/processes 自动部署 BPMN XML 流程\n  history-level: full # full：保存历史数据的最高级别，可保存全部流程相关细节，包括流程流转各节点参数\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n\n--- #################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: bpm_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.bpm\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  captcha:\n    timeout: 5m\n    width: 160\n    height: 60\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.bpm.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n\ndebug: false\n\n--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n    #    password: zhang8324761 # 密码，建议生产环境开启\n    database: 0 # 数据库索引\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9080/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.bpm.dal.mysql: debug\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  captcha:\n    enable: false # 本地环境，暂时关闭图片验证码，方便登录等接口的测试\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式\n', 'd130e6216cdde0ff1d70ed6db0ad5998', '2023-02-25 15:29:18', '2023-02-25 15:57:38', 'nacos', '0:0:0:0:0:0:0:1', '', 'dev', '', '', '', 'yaml', '');
COMMIT;

-- ----------------------------
-- Table structure for config_info_aggr
-- ----------------------------
DROP TABLE IF EXISTS `config_info_aggr`;
CREATE TABLE `config_info_aggr` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'group_id',
  `datum_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'datum_id',
  `content` longtext CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT '内容',
  `gmt_modified` datetime NOT NULL COMMENT '修改时间',
  `app_name` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin COMMENT='增加租户字段';

-- ----------------------------
-- Records of config_info_aggr
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_info_beta
-- ----------------------------
DROP TABLE IF EXISTS `config_info_beta`;
CREATE TABLE `config_info_beta` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'group_id',
  `app_name` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'content',
  `beta_ips` varchar(1024) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'betaIps',
  `md5` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8mb3 COLLATE utf8mb3_bin COMMENT 'source user',
  `src_ip` varchar(20) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'source ip',
  `tenant_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin COMMENT='config_info_beta';

-- ----------------------------
-- Records of config_info_beta
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_info_tag
-- ----------------------------
DROP TABLE IF EXISTS `config_info_tag`;
CREATE TABLE `config_info_tag` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT '' COMMENT 'tenant_id',
  `tag_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'tag_id',
  `app_name` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8mb3 COLLATE utf8mb3_bin COMMENT 'source user',
  `src_ip` varchar(20) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'source ip',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin COMMENT='config_info_tag';

-- ----------------------------
-- Records of config_info_tag
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for config_tags_relation
-- ----------------------------
DROP TABLE IF EXISTS `config_tags_relation`;
CREATE TABLE `config_tags_relation` (
  `id` bigint NOT NULL COMMENT 'id',
  `tag_name` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'tag_name',
  `tag_type` varchar(64) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'tag_type',
  `data_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT '' COMMENT 'tenant_id',
  `nid` bigint NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`nid`) USING BTREE,
  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`) USING BTREE,
  KEY `idx_tenant_id` (`tenant_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin COMMENT='config_tag_relation';

-- ----------------------------
-- Records of config_tags_relation
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for group_capacity
-- ----------------------------
DROP TABLE IF EXISTS `group_capacity`;
CREATE TABLE `group_capacity` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `group_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',
  `quota` int unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
  `usage` int unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
  `max_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数，，0表示使用默认值',
  `max_aggr_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `uk_group_id` (`group_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin COMMENT='集群、各Group容量信息表';

-- ----------------------------
-- Records of group_capacity
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for his_config_info
-- ----------------------------
DROP TABLE IF EXISTS `his_config_info`;
CREATE TABLE `his_config_info` (
  `id` bigint unsigned NOT NULL,
  `nid` bigint unsigned NOT NULL AUTO_INCREMENT,
  `data_id` varchar(255) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `group_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `app_name` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `md5` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL,
  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00',
  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00',
  `src_user` text CHARACTER SET utf8mb3 COLLATE utf8mb3_bin,
  `src_ip` varchar(20) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL,
  `op_type` char(10) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`nid`) USING BTREE,
  KEY `idx_gmt_create` (`gmt_create`) USING BTREE,
  KEY `idx_gmt_modified` (`gmt_modified`) USING BTREE,
  KEY `idx_did` (`data_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=85 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin COMMENT='多租户改造';

-- ----------------------------
-- Records of his_config_info
-- ----------------------------
BEGIN;
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 40, 'yudao-module-infra.yaml', 'DEFAULT_GROUP', '', '# 基本配置\nspring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n#################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: infra-server # TODO 一定要写么？\n\n#################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      #      function:\n      #        definition: roleRefreshConsumer;roleMenuRefreshConsumer;userRoleRefreshConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        roleRefresh-out-0:\n          destination: system_role_refresh\n        roleRefreshConsumer-in-0:\n          destination: system_role_refresh\n          group: system_role_refresh_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: infra_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n#################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n#################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.infra\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  codegen:\n    base-package: cn.iocoder.yudao\n    db-schemas: ${spring.datasource.dynamic.datasource.master.name}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.infra.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n    ignore-urls:\n      - /admin-api/infra/file/*/get/** # 获取图片，和租户无关\n    ignore-tables:\n      - infra_codegen_column\n      - infra_codegen_table\n      - infra_test_demo\n      - infra_config\n      - infra_file_config\n      - infra_file\n      - infra_file_content\n      - infra_job\n      - infra_job_log\n      - infra_job_log\n      - infra_data_source_config\n\ndebug: false\n\n#################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n        slave: # 模拟从库，可根据自己需要修改 # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码\n    database: 1 # 数据库索引\n#    password: 123456 # 密码，建议生产环境开启\n\n#################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n#################### 定时任务相关配置 ####################\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9090/xxl-job-admin # 调度中心部署跟地址\n\n#################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n#################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n      # Spring Boot Admin Server 服务端的相关配置\n      context-path: /admin # 配置 Spring\n\n#################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  demo: false # 开启演示模式', '94bd33f737057a99a8fd0060580fb0a7', '2010-05-05 00:00:00', '2023-02-25 08:30:33', NULL, '0:0:0:0:0:0:0:1', 'I', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 41, 'yudao-module-infra.yaml', 'DEFAULT_GROUP', '', '# 基本配置\nspring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n#################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: infra-server # TODO 一定要写么？\n\n#################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      #      function:\n      #        definition: roleRefreshConsumer;roleMenuRefreshConsumer;userRoleRefreshConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        roleRefresh-out-0:\n          destination: system_role_refresh\n        roleRefreshConsumer-in-0:\n          destination: system_role_refresh\n          group: system_role_refresh_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: infra_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n#################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n#################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.infra\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  codegen:\n    base-package: cn.iocoder.yudao\n    db-schemas: ${spring.datasource.dynamic.datasource.master.name}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.infra.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n    ignore-urls:\n      - /admin-api/infra/file/*/get/** # 获取图片，和租户无关\n    ignore-tables:\n      - infra_codegen_column\n      - infra_codegen_table\n      - infra_test_demo\n      - infra_config\n      - infra_file_config\n      - infra_file\n      - infra_file_content\n      - infra_job\n      - infra_job_log\n      - infra_job_log\n      - infra_data_source_config\n\ndebug: false\n\n#################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n        slave: # 模拟从库，可根据自己需要修改 # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码\n    database: 1 # 数据库索引\n#    password: 123456 # 密码，建议生产环境开启\n\n#################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n#################### 定时任务相关配置 ####################\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9090/xxl-job-admin # 调度中心部署跟地址\n\n#################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n#################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n      # Spring Boot Admin Server 服务端的相关配置\n      context-path: /admin # 配置 Spring\n\n#################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  demo: false # 开启演示模式', '94bd33f737057a99a8fd0060580fb0a7', '2010-05-05 00:00:00', '2023-02-25 08:31:27', NULL, '0:0:0:0:0:0:0:1', 'I', '6258af5a-494e-412b-b0ab-fe79853a9f35');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1045, 42, 'yudao-module-infra.yaml', 'DEFAULT_GROUP', '', '# 基本配置\nspring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n#################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: infra-server # TODO 一定要写么？\n\n#################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      #      function:\n      #        definition: roleRefreshConsumer;roleMenuRefreshConsumer;userRoleRefreshConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        roleRefresh-out-0:\n          destination: system_role_refresh\n        roleRefreshConsumer-in-0:\n          destination: system_role_refresh\n          group: system_role_refresh_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: infra_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n#################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n#################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.infra\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  codegen:\n    base-package: cn.iocoder.yudao\n    db-schemas: ${spring.datasource.dynamic.datasource.master.name}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.infra.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n    ignore-urls:\n      - /admin-api/infra/file/*/get/** # 获取图片，和租户无关\n    ignore-tables:\n      - infra_codegen_column\n      - infra_codegen_table\n      - infra_test_demo\n      - infra_config\n      - infra_file_config\n      - infra_file\n      - infra_file_content\n      - infra_job\n      - infra_job_log\n      - infra_job_log\n      - infra_data_source_config\n\ndebug: false\n\n#################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n        slave: # 模拟从库，可根据自己需要修改 # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码\n    database: 1 # 数据库索引\n#    password: 123456 # 密码，建议生产环境开启\n\n#################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n#################### 定时任务相关配置 ####################\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9090/xxl-job-admin # 调度中心部署跟地址\n\n#################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n#################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n      # Spring Boot Admin Server 服务端的相关配置\n      context-path: /admin # 配置 Spring\n\n#################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  demo: false # 开启演示模式', '94bd33f737057a99a8fd0060580fb0a7', '2010-05-05 00:00:00', '2023-02-25 08:31:38', NULL, '0:0:0:0:0:0:0:1', 'D', '');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 43, 'infra-server.yaml', 'DEFAULT_GROUP', '', '# 基本配置\nspring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n#################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: infra-server # TODO 一定要写么？\n\n#################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      #      function:\n      #        definition: roleRefreshConsumer;roleMenuRefreshConsumer;userRoleRefreshConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        roleRefresh-out-0:\n          destination: system_role_refresh\n        roleRefreshConsumer-in-0:\n          destination: system_role_refresh\n          group: system_role_refresh_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: infra_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n#################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n#################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.infra\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  codegen:\n    base-package: cn.iocoder.yudao\n    db-schemas: ${spring.datasource.dynamic.datasource.master.name}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.infra.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n    ignore-urls:\n      - /admin-api/infra/file/*/get/** # 获取图片，和租户无关\n    ignore-tables:\n      - infra_codegen_column\n      - infra_codegen_table\n      - infra_test_demo\n      - infra_config\n      - infra_file_config\n      - infra_file\n      - infra_file_content\n      - infra_job\n      - infra_job_log\n      - infra_job_log\n      - infra_data_source_config\n\ndebug: false\n\n#################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n        slave: # 模拟从库，可根据自己需要修改 # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码\n    database: 1 # 数据库索引\n#    password: 123456 # 密码，建议生产环境开启\n\n#################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n#################### 定时任务相关配置 ####################\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9090/xxl-job-admin # 调度中心部署跟地址\n\n#################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n#################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n      # Spring Boot Admin Server 服务端的相关配置\n      context-path: /admin # 配置 Spring\n\n#################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  demo: false # 开启演示模式', '94bd33f737057a99a8fd0060580fb0a7', '2010-05-05 00:00:00', '2023-02-25 08:45:20', NULL, '0:0:0:0:0:0:0:1', 'I', '6258af5a-494e-412b-b0ab-fe79853a9f35');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1046, 44, 'yudao-module-infra.yaml', 'DEFAULT_GROUP', '', '# 基本配置\nspring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n#################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: infra-server # TODO 一定要写么？\n\n#################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      #      function:\n      #        definition: roleRefreshConsumer;roleMenuRefreshConsumer;userRoleRefreshConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        roleRefresh-out-0:\n          destination: system_role_refresh\n        roleRefreshConsumer-in-0:\n          destination: system_role_refresh\n          group: system_role_refresh_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: infra_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n#################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n#################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.infra\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  codegen:\n    base-package: cn.iocoder.yudao\n    db-schemas: ${spring.datasource.dynamic.datasource.master.name}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.infra.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n    ignore-urls:\n      - /admin-api/infra/file/*/get/** # 获取图片，和租户无关\n    ignore-tables:\n      - infra_codegen_column\n      - infra_codegen_table\n      - infra_test_demo\n      - infra_config\n      - infra_file_config\n      - infra_file\n      - infra_file_content\n      - infra_job\n      - infra_job_log\n      - infra_job_log\n      - infra_data_source_config\n\ndebug: false\n\n#################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n        slave: # 模拟从库，可根据自己需要修改 # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码\n    database: 1 # 数据库索引\n#    password: 123456 # 密码，建议生产环境开启\n\n#################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n#################### 定时任务相关配置 ####################\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9090/xxl-job-admin # 调度中心部署跟地址\n\n#################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n#################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n      # Spring Boot Admin Server 服务端的相关配置\n      context-path: /admin # 配置 Spring\n\n#################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  demo: false # 开启演示模式', '94bd33f737057a99a8fd0060580fb0a7', '2010-05-05 00:00:00', '2023-02-25 08:45:24', NULL, '0:0:0:0:0:0:0:1', 'D', '6258af5a-494e-412b-b0ab-fe79853a9f35');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 45, 'xxl-job.yml', 'DEFAULT_GROUP', '', '# xxl\nxxl:\n  job:\n    i18n: zh_CN\n    logretentiondays: 30\n    triggerpool:\n      fast.max: 200\n      slow.max: 200\n\n# mybatis\nmybatis:\n  mapper-locations: classpath:/mybatis-mapper/*Mapper.xml\n\n# spring\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: ${MYSQL_USER:root}\n    password: ${MYSQL_PWD:Zhang@8324761}\n    url: jdbc:mysql://${MYSQL_HOST:loong-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:loong_job}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  mvc:\n    static-path-pattern: /static/**\n  freemarker:\n    suffix: .ftl\n    request-context-attribute: request\n    settings:\n      number_format: 0.##########\n  mail:\n    host: smtp.mxhichina.com\n    port: 465\n    from: xxxx@gitee.wang\n    username: xxxx@gitee.wang\n    password: xxxx\n    properties:\n      mail:\n        smtp:\n          auth: true\n          ssl.enable: true\n          starttls.enable: false\n          required: false\n# spring boot admin 配置\n\nmanagement:\n  health:\n    mail:\n      enabled: false\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  endpoint:\n    health:\n      show-details: ALWAYS', 'c354be2e85d1261de062f119915fe0c8', '2010-05-05 00:00:00', '2023-02-25 08:48:09', NULL, '0:0:0:0:0:0:0:1', 'I', '6258af5a-494e-412b-b0ab-fe79853a9f35');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1048, 46, 'xxl-job.yml', 'DEFAULT_GROUP', '', '# xxl\nxxl:\n  job:\n    i18n: zh_CN\n    logretentiondays: 30\n    triggerpool:\n      fast.max: 200\n      slow.max: 200\n\n# mybatis\nmybatis:\n  mapper-locations: classpath:/mybatis-mapper/*Mapper.xml\n\n# spring\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: ${MYSQL_USER:root}\n    password: ${MYSQL_PWD:Zhang@8324761}\n    url: jdbc:mysql://${MYSQL_HOST:loong-mysql}:${MYSQL_PORT:3306}/${MYSQL_DB:loong_job}?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  mvc:\n    static-path-pattern: /static/**\n  freemarker:\n    suffix: .ftl\n    request-context-attribute: request\n    settings:\n      number_format: 0.##########\n  mail:\n    host: smtp.mxhichina.com\n    port: 465\n    from: xxxx@gitee.wang\n    username: xxxx@gitee.wang\n    password: xxxx\n    properties:\n      mail:\n        smtp:\n          auth: true\n          ssl.enable: true\n          starttls.enable: false\n          required: false\n# spring boot admin 配置\n\nmanagement:\n  health:\n    mail:\n      enabled: false\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  endpoint:\n    health:\n      show-details: ALWAYS', 'c354be2e85d1261de062f119915fe0c8', '2010-05-05 00:00:00', '2023-02-25 08:52:27', 'nacos', '0:0:0:0:0:0:0:1', 'U', '6258af5a-494e-412b-b0ab-fe79853a9f35');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 47, 'infra-server-local.yaml', 'DEFAULT_GROUP', '', '# 基本配置\nspring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n#################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: infra-server # TODO 一定要写么？\n\n#################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      #      function:\n      #        definition: roleRefreshConsumer;roleMenuRefreshConsumer;userRoleRefreshConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        roleRefresh-out-0:\n          destination: system_role_refresh\n        roleRefreshConsumer-in-0:\n          destination: system_role_refresh\n          group: system_role_refresh_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: infra_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n#################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n#################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.infra\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  codegen:\n    base-package: cn.iocoder.yudao\n    db-schemas: ${spring.datasource.dynamic.datasource.master.name}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.infra.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n    ignore-urls:\n      - /admin-api/infra/file/*/get/** # 获取图片，和租户无关\n    ignore-tables:\n      - infra_codegen_column\n      - infra_codegen_table\n      - infra_test_demo\n      - infra_config\n      - infra_file_config\n      - infra_file\n      - infra_file_content\n      - infra_job\n      - infra_job_log\n      - infra_job_log\n      - infra_data_source_config\n\ndebug: false\n\n#################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n        slave: # 模拟从库，可根据自己需要修改 # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码\n    database: 1 # 数据库索引\n#    password: 123456 # 密码，建议生产环境开启\n\n#################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n#################### 定时任务相关配置 ####################\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9090/xxl-job-admin # 调度中心部署跟地址\n\n#################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n#################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n      # Spring Boot Admin Server 服务端的相关配置\n      context-path: /admin # 配置 Spring\n\n#################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  demo: false # 开启演示模式', '94bd33f737057a99a8fd0060580fb0a7', '2010-05-05 00:00:00', '2023-02-25 09:07:19', NULL, '0:0:0:0:0:0:0:1', 'I', '6258af5a-494e-412b-b0ab-fe79853a9f35');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1047, 48, 'infra-server.yaml', 'DEFAULT_GROUP', '', '# 基本配置\nspring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n#################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: infra-server # TODO 一定要写么？\n\n#################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      #      function:\n      #        definition: roleRefreshConsumer;roleMenuRefreshConsumer;userRoleRefreshConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        roleRefresh-out-0:\n          destination: system_role_refresh\n        roleRefreshConsumer-in-0:\n          destination: system_role_refresh\n          group: system_role_refresh_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: infra_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n#################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n#################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.infra\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  codegen:\n    base-package: cn.iocoder.yudao\n    db-schemas: ${spring.datasource.dynamic.datasource.master.name}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.infra.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n    ignore-urls:\n      - /admin-api/infra/file/*/get/** # 获取图片，和租户无关\n    ignore-tables:\n      - infra_codegen_column\n      - infra_codegen_table\n      - infra_test_demo\n      - infra_config\n      - infra_file_config\n      - infra_file\n      - infra_file_content\n      - infra_job\n      - infra_job_log\n      - infra_job_log\n      - infra_data_source_config\n\ndebug: false\n\n#################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n        slave: # 模拟从库，可根据自己需要修改 # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码\n    database: 1 # 数据库索引\n#    password: 123456 # 密码，建议生产环境开启\n\n#################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n#################### 定时任务相关配置 ####################\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9090/xxl-job-admin # 调度中心部署跟地址\n\n#################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n#################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n      # Spring Boot Admin Server 服务端的相关配置\n      context-path: /admin # 配置 Spring\n\n#################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  demo: false # 开启演示模式', '94bd33f737057a99a8fd0060580fb0a7', '2010-05-05 00:00:00', '2023-02-25 09:09:42', NULL, '0:0:0:0:0:0:0:1', 'D', '6258af5a-494e-412b-b0ab-fe79853a9f35');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 49, 'xxl-job.yml', 'DEFAULT_GROUP', '', '# xxl\nxxl:\n  job:\n    i18n: zh_CN\n    logretentiondays: 30\n    triggerpool:\n      fast.max: 200\n      slow.max: 200\n\n# mybatis\nmybatis:\n  mapper-locations: classpath:/mybatis-mapper/*Mapper.xml\n\n# spring\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: ${MYSQL_USER:root}\n    password: ${MYSQL_PWD:Zhang@8324761}\n    url: jdbc:mysql://localhost:3306/yudao_job?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  mvc:\n    static-path-pattern: /static/**\n  freemarker:\n    suffix: .ftl\n    request-context-attribute: request\n    settings:\n      number_format: 0.##########\n  mail:\n    host: smtp.mxhichina.com\n    port: 465\n    from: xxxx@gitee.wang\n    username: xxxx@gitee.wang\n    password: xxxx\n    properties:\n      mail:\n        smtp:\n          auth: true\n          ssl.enable: true\n          starttls.enable: false\n          required: false\n# spring boot admin 配置\n\nmanagement:\n  health:\n    mail:\n      enabled: false\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  endpoint:\n    health:\n      show-details: ALWAYS', '197959c611fedd17e622344362e3ed6a', '2010-05-05 00:00:00', '2023-02-25 09:10:18', NULL, '0:0:0:0:0:0:0:1', 'I', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 50, 'infra-server-local.yaml', 'DEFAULT_GROUP', '', '# 基本配置\nspring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n#################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: infra-server # TODO 一定要写么？\n\n#################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      #      function:\n      #        definition: roleRefreshConsumer;roleMenuRefreshConsumer;userRoleRefreshConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        roleRefresh-out-0:\n          destination: system_role_refresh\n        roleRefreshConsumer-in-0:\n          destination: system_role_refresh\n          group: system_role_refresh_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: infra_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n#################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n#################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.infra\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  codegen:\n    base-package: cn.iocoder.yudao\n    db-schemas: ${spring.datasource.dynamic.datasource.master.name}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.infra.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n    ignore-urls:\n      - /admin-api/infra/file/*/get/** # 获取图片，和租户无关\n    ignore-tables:\n      - infra_codegen_column\n      - infra_codegen_table\n      - infra_test_demo\n      - infra_config\n      - infra_file_config\n      - infra_file\n      - infra_file_content\n      - infra_job\n      - infra_job_log\n      - infra_job_log\n      - infra_data_source_config\n\ndebug: false\n\n#################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n        slave: # 模拟从库，可根据自己需要修改 # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码\n    database: 1 # 数据库索引\n#    password: 123456 # 密码，建议生产环境开启\n\n#################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n#################### 定时任务相关配置 ####################\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9090/xxl-job-admin # 调度中心部署跟地址\n\n#################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n#################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n      # Spring Boot Admin Server 服务端的相关配置\n      context-path: /admin # 配置 Spring\n\n#################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  demo: false # 开启演示模式', '94bd33f737057a99a8fd0060580fb0a7', '2010-05-05 00:00:00', '2023-02-25 09:10:18', NULL, '0:0:0:0:0:0:0:1', 'I', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1052, 51, 'infra-server-local.yaml', 'DEFAULT_GROUP', '', '# 基本配置\nspring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n#################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: infra-server # TODO 一定要写么？\n\n#################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      #      function:\n      #        definition: roleRefreshConsumer;roleMenuRefreshConsumer;userRoleRefreshConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        roleRefresh-out-0:\n          destination: system_role_refresh\n        roleRefreshConsumer-in-0:\n          destination: system_role_refresh\n          group: system_role_refresh_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: infra_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n#################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n#################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.infra\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  codegen:\n    base-package: cn.iocoder.yudao\n    db-schemas: ${spring.datasource.dynamic.datasource.master.name}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.infra.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n    ignore-urls:\n      - /admin-api/infra/file/*/get/** # 获取图片，和租户无关\n    ignore-tables:\n      - infra_codegen_column\n      - infra_codegen_table\n      - infra_test_demo\n      - infra_config\n      - infra_file_config\n      - infra_file\n      - infra_file_content\n      - infra_job\n      - infra_job_log\n      - infra_job_log\n      - infra_data_source_config\n\ndebug: false\n\n#################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n        slave: # 模拟从库，可根据自己需要修改 # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码\n    database: 1 # 数据库索引\n#    password: 123456 # 密码，建议生产环境开启\n\n#################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n#################### 定时任务相关配置 ####################\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9090/xxl-job-admin # 调度中心部署跟地址\n\n#################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n#################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n      # Spring Boot Admin Server 服务端的相关配置\n      context-path: /admin # 配置 Spring\n\n#################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  demo: false # 开启演示模式', '94bd33f737057a99a8fd0060580fb0a7', '2010-05-05 00:00:00', '2023-02-25 09:19:42', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1052, 52, 'infra-server-local.yaml', 'DEFAULT_GROUP', '', '# 基本配置\nspring:\n  main:\n    # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-circular-references: true\n    # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n    allow-bean-definition-overriding: true\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      # 单个文件大小\n      max-file-size: 16MB\n      # 设置总上传的文件大小\n      max-request-size: 32MB\n  mvc:\n    pathmatch:\n      # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n      matching-strategy: ANT_PATH_MATCHER\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      # 设置 LocalDateTime 的格式，使用时间戳\n      write-dates-as-timestamps: true\n      # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-date-timestamps-as-nanoseconds: false\n      # 设置 Duration 的格式，使用时间戳\n      write-durations-as-timestamps: true\n      # 允许序列化无属性的 Bean\n      fail-on-empty-beans: false\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      # 设置过期时间为 1 小时\n      time-to-live: 1h\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    # 虽然默认为 true ，但是还是显示去指定下。\n    map-underscore-to-camel-case: true\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n      id-type: NONE \n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      # 逻辑已删除值(默认为 1)\n      logic-delete-value: 1\n      # 逻辑未删除值(默认为 0)\n      logic-not-delete-value: 0\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n    password: XDV71a+xqStEA3WH\n\n#################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    # 指定 Dubbo 服务实现类的扫描基准包\n    base-packages: ${yudao.info.base-package}.api\n  protocol:\n    # 协议名称\n    name: dubbo\n    # 协议端口，-1 表示自增端口，从 20880 开始\n    port: -1\n  registry:\n    # 设置使用 Spring Cloud 注册中心\n    address: spring-cloud://localhost\n  application:\n    id: infra-server\n\n#################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      #      function:\n      #        definition: roleRefreshConsumer;roleMenuRefreshConsumer;userRoleRefreshConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        roleRefresh-out-0:\n          destination: system_role_refresh\n        roleRefreshConsumer-in-0:\n          destination: system_role_refresh\n          group: system_role_refresh_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          # RocketMQ Namesrv 地址\n          name-server: 127.0.0.1:9876\n        # 默认 bindings 全局配置\n        default: \n          # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n          producer:\n            # 生产者分组\n            group: infra_producer_group\n            # 发送模式，SYNC 同步\n            send-type: SYNC\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      # 是否开启，默认为 true\n      enabled: true\n      # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      id: ${spring.application.name}:${server.port}\n      # 目标消息队列，默认为 springCloudBus\n      destination: springCloudBus\n\n#################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      # 执行器 AppName\n      appname: ${spring.application.name}\n      # 执行器运行日志文件存储磁盘路径\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name}\n    # 执行器通讯TOKEN\n    accessToken: default_token\n\n#################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.infra\n  web:\n    admin-ui:\n      # Admin 管理后台 UI 的地址\n      url: http://dashboard.yudao.iocoder.cn\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  codegen:\n    base-package: cn.iocoder.yudao\n    db-schemas: ${spring.datasource.dynamic.datasource.master.name}\n  # 错误码相关配置项\n  error-code:\n    constants-class-list:\n      - cn.iocoder.yudao.module.infra.enums.ErrorCodeConstants\n  # 多租户相关配置项\n  tenant:\n    enable: true\n    ignore-urls:\n      # 获取图片，和租户无关\n      - /admin-api/infra/file/*/get/**\n    ignore-tables:\n      - infra_codegen_column\n      - infra_codegen_table\n      - infra_test_demo\n      - infra_config\n      - infra_file_config\n      - infra_file\n      - infra_file_content\n      - infra_job\n      - infra_job_log\n      - infra_job_log\n      - infra_data_source_config\n\ndebug: false\n\n#################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure\n  datasource:\n    # Druid 【监控】相关的全局配置\n    druid:\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        # 设置白名单，不填则允许所有访问\n        allow: \n        url-pattern: /druid/*\n        # 控制台管理用户名和密码\n        login-username: \n        login-password:\n      filter:\n        stat:\n          enabled: true\n          # 慢 SQL 记录\n          log-slow-sql: true\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        # 初始连接数\n        initial-size: 5\n        # 最小连接池数量\n        min-idle: 10\n        # 最大连接池数量\n        max-active: 20\n        # 配置获取连接等待超时的时间，单位：毫秒\n        max-wait: 600000\n        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        time-between-eviction-runs-millis: 60000\n        # 配置一个连接在池中最小生存的时间，单位：毫秒\n        min-evictable-idle-time-millis: 300000\n        # 配置一个连接在池中最大生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000\n        # 配置检测连接是否有效\n        validation-query: SELECT 1 FROM DUAL\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n        # 模拟从库，可根据自己需要修改 # 模拟从库，可根据自己需要修改\n        slave:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT&nullCatalogMeansCurrent=true\n          driver-class-name: com.mysql.jdbc.Driver\n          username: root\n          password: Zhang@8324761\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码，建议生产环境开启\n    database: 1 # 数据库索引\n\n#################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n#################### 定时任务相关配置 ####################\nxxl:\n  job:\n    admin:\n      # 调度中心部署跟地址\n      addresses: http://127.0.0.1:9090/xxl-job-admin\n\n#################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  # 获取分布式锁超时时间，默认为 3000 毫秒\n  acquire-timeout: 3000\n  # 分布式锁的超时时间，默认为 30 毫秒\n  expire: 30000\n\n#################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      base-path: /actuator\n      exposure:\n        # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n        include: \'*\'\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        # 设置 Spring Boot Admin Server 地址\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path}\n        instance:\n          # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n          service-host-type: IP\n      # Spring Boot Admin Server 服务端的相关配置\n      # 配置 Spring\n      context-path: /admin\n\n#################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  xss:\n    enable: false\n    # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n    exclude-urls:\n      # 不处理 Spring Boot Admin 的请求\n      - ${spring.boot.admin.context-path}/**\n      # 不处理 Actuator 的请求\n      - ${management.endpoints.web.base-path}/**\n  # 开启演示模式\n  demo: false', 'ec4be0618e76db241c157b3ac719cce7', '2010-05-05 00:00:00', '2023-02-25 09:31:13', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 53, 'application-local.yaml', 'DEFAULT_GROUP', '', '# 基本配置\nspring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: infra-server # TODO 一定要写么？\n\n #################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      #      function:\n      #        definition: roleRefreshConsumer;roleMenuRefreshConsumer;userRoleRefreshConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        roleRefresh-out-0:\n          destination: system_role_refresh\n        roleRefreshConsumer-in-0:\n          destination: system_role_refresh\n          group: system_role_refresh_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: infra_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.infra\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  codegen:\n    base-package: cn.iocoder.yudao\n    db-schemas: ${spring.datasource.dynamic.datasource.master.name}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.infra.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n    ignore-urls:\n      - /admin-api/infra/file/*/get/** # 获取图片，和租户无关\n    ignore-tables:\n      - infra_codegen_column\n      - infra_codegen_table\n      - infra_test_demo\n      - infra_config\n      - infra_file_config\n      - infra_file\n      - infra_file_content\n      - infra_job\n      - infra_job_log\n      - infra_job_log\n      - infra_data_source_config\n\ndebug: false\n', '7ad7096041a058012b70c4def1b773ee', '2010-05-05 00:00:00', '2023-02-25 09:32:06', NULL, '0:0:0:0:0:0:0:1', 'I', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1052, 54, 'infra-server-local.yaml', 'DEFAULT_GROUP', '', '#################### 数据库相关配置 ####################\nspring:\n\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码\n    database: 0 # 数据库索引\n#    password: 123456 # 密码，建议生产环境开启\n\n#################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n#################### 定时任务相关配置 ####################\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9090/xxl-job-admin # 调度中心部署跟地址\n\n#################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n#################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n      # Spring Boot Admin Server 服务端的相关配置\n      context-path: /admin # 配置 Spring\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.infra.dal.mysql: debug\n\n#################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式\n', 'c8d58958fc1137961ade676f66f61079', '2010-05-05 00:00:00', '2023-02-25 09:34:38', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1055, 55, 'application-local.yaml', 'DEFAULT_GROUP', '', '# 基本配置\nspring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: infra-server # TODO 一定要写么？\n\n #################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      #      function:\n      #        definition: roleRefreshConsumer;roleMenuRefreshConsumer;userRoleRefreshConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        roleRefresh-out-0:\n          destination: system_role_refresh\n        roleRefreshConsumer-in-0:\n          destination: system_role_refresh\n          group: system_role_refresh_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: infra_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.infra\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  codegen:\n    base-package: cn.iocoder.yudao\n    db-schemas: ${spring.datasource.dynamic.datasource.master.name}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.infra.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n    ignore-urls:\n      - /admin-api/infra/file/*/get/** # 获取图片，和租户无关\n    ignore-tables:\n      - infra_codegen_column\n      - infra_codegen_table\n      - infra_test_demo\n      - infra_config\n      - infra_file_config\n      - infra_file\n      - infra_file_content\n      - infra_job\n      - infra_job_log\n      - infra_job_log\n      - infra_data_source_config\n\ndebug: false\n', '7ad7096041a058012b70c4def1b773ee', '2010-05-05 00:00:00', '2023-02-25 09:35:47', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1052, 56, 'infra-server-local.yaml', 'DEFAULT_GROUP', '', '#################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码\n    database: 0 # 数据库索引\n#    password: 123456 # 密码，建议生产环境开启\n  \n  \n  # Spring Boot Admin 配置项\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n      # Spring Boot Admin Server 服务端的相关配置\n      context-path: /admin # 配置 Spring\n\n#################### MQ 消息队列相关配置 ####################\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n#################### 定时任务相关配置 ####################\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9090/xxl-job-admin # 调度中心部署跟地址\n\n#################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n#################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.infra.dal.mysql: debug\n\n#################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式\n', 'eb31cda3b569fec016ca55b87999010e', '2010-05-05 00:00:00', '2023-02-25 09:36:29', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 57, 'xxl-job-local.yaml', 'DEFAULT_GROUP', '', '# xxl\nxxl:\n  job:\n    i18n: zh_CN\n    logretentiondays: 30\n    triggerpool:\n      fast.max: 200\n      slow.max: 200\n\n# mybatis\nmybatis:\n  mapper-locations: classpath:/mybatis-mapper/*Mapper.xml\n\n# spring\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: ${MYSQL_USER:root}\n    password: ${MYSQL_PWD:Zhang@8324761}\n    url: jdbc:mysql://localhost:3306/yudao_job?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  mvc:\n    static-path-pattern: /static/**\n  freemarker:\n    suffix: .ftl\n    request-context-attribute: request\n    settings:\n      number_format: 0.##########\n  mail:\n    host: smtp.mxhichina.com\n    port: 465\n    from: xxxx@gitee.wang\n    username: xxxx@gitee.wang\n    password: xxxx\n    properties:\n      mail:\n        smtp:\n          auth: true\n          ssl.enable: true\n          starttls.enable: false\n          required: false\n# spring boot admin 配置\n\nmanagement:\n  health:\n    mail:\n      enabled: false\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  endpoint:\n    health:\n      show-details: ALWAYS', '197959c611fedd17e622344362e3ed6a', '2010-05-05 00:00:00', '2023-02-25 09:37:02', NULL, '0:0:0:0:0:0:0:1', 'I', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1051, 58, 'xxl-job.yml', 'DEFAULT_GROUP', '', '# xxl\nxxl:\n  job:\n    i18n: zh_CN\n    logretentiondays: 30\n    triggerpool:\n      fast.max: 200\n      slow.max: 200\n\n# mybatis\nmybatis:\n  mapper-locations: classpath:/mybatis-mapper/*Mapper.xml\n\n# spring\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: ${MYSQL_USER:root}\n    password: ${MYSQL_PWD:Zhang@8324761}\n    url: jdbc:mysql://localhost:3306/yudao_job?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  mvc:\n    static-path-pattern: /static/**\n  freemarker:\n    suffix: .ftl\n    request-context-attribute: request\n    settings:\n      number_format: 0.##########\n  mail:\n    host: smtp.mxhichina.com\n    port: 465\n    from: xxxx@gitee.wang\n    username: xxxx@gitee.wang\n    password: xxxx\n    properties:\n      mail:\n        smtp:\n          auth: true\n          ssl.enable: true\n          starttls.enable: false\n          required: false\n# spring boot admin 配置\n\nmanagement:\n  health:\n    mail:\n      enabled: false\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  endpoint:\n    health:\n      show-details: ALWAYS', '197959c611fedd17e622344362e3ed6a', '2010-05-05 00:00:00', '2023-02-25 09:38:07', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1059, 59, 'xxl-job-local.yaml', 'DEFAULT_GROUP', '', '# xxl\nxxl:\n  job:\n    i18n: zh_CN\n    logretentiondays: 30\n    triggerpool:\n      fast.max: 200\n      slow.max: 200\n\n# mybatis\nmybatis:\n  mapper-locations: classpath:/mybatis-mapper/*Mapper.xml\n\n# spring\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: ${MYSQL_USER:root}\n    password: ${MYSQL_PWD:Zhang@8324761}\n    url: jdbc:mysql://localhost:3306/yudao_job?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  mvc:\n    static-path-pattern: /static/**\n  freemarker:\n    suffix: .ftl\n    request-context-attribute: request\n    settings:\n      number_format: 0.##########\n  mail:\n    host: smtp.mxhichina.com\n    port: 465\n    from: xxxx@gitee.wang\n    username: xxxx@gitee.wang\n    password: xxxx\n    properties:\n      mail:\n        smtp:\n          auth: true\n          ssl.enable: true\n          starttls.enable: false\n          required: false\n# spring boot admin 配置\n\nmanagement:\n  health:\n    mail:\n      enabled: false\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  endpoint:\n    health:\n      show-details: ALWAYS', '197959c611fedd17e622344362e3ed6a', '2010-05-05 00:00:00', '2023-02-25 09:38:47', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1051, 60, 'xxl-job.yml', 'DEFAULT_GROUP', '', '# xxl\nxxl:\n  job:\n    i18n: zh_CN\n    logretentiondays: 30\n    triggerpool:\n      fast.max: 200\n      slow.max: 200\n\n# mybatis\nmybatis:\n  mapper-locations: classpath:/mybatis-mapper/*Mapper.xml\n\n# spring\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: ${MYSQL_USER:root}\n    password: ${MYSQL_PWD:Zhang@8324761}\n    url: jdbc:mysql://localhost:3306/yudao-job?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  mvc:\n    static-path-pattern: /static/**\n  freemarker:\n    suffix: .ftl\n    request-context-attribute: request\n    settings:\n      number_format: 0.##########\n  mail:\n    host: smtp.mxhichina.com\n    port: 465\n    from: xxxx@gitee.wang\n    username: xxxx@gitee.wang\n    password: xxxx\n    properties:\n      mail:\n        smtp:\n          auth: true\n          ssl.enable: true\n          starttls.enable: false\n          required: false\n# spring boot admin 配置\n\nmanagement:\n  health:\n    mail:\n      enabled: false\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  endpoint:\n    health:\n      show-details: ALWAYS', '89582063211e827622b6731f9bde20c3', '2010-05-05 00:00:00', '2023-02-25 09:38:54', NULL, '0:0:0:0:0:0:0:1', 'D', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1059, 61, 'xxl-job-local.yaml', 'DEFAULT_GROUP', '', '# xxl\nxxl:\n  job:\n    i18n: zh_CN\n    logretentiondays: 30\n    triggerpool:\n      fast.max: 200\n      slow.max: 200\n\n# mybatis\nmybatis:\n  mapper-locations: classpath:/mybatis-mapper/*Mapper.xml\n\n# spring\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: ${MYSQL_USER:root}\n    password: ${MYSQL_PWD:Zhang@8324761}\n    url: jdbc:mysql://localhost:3306/yudao-job?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  mvc:\n    static-path-pattern: /static/**\n  freemarker:\n    suffix: .ftl\n    request-context-attribute: request\n    settings:\n      number_format: 0.##########\n  mail:\n    host: smtp.mxhichina.com\n    port: 465\n    from: xxxx@gitee.wang\n    username: xxxx@gitee.wang\n    password: xxxx\n    properties:\n      mail:\n        smtp:\n          auth: true\n          ssl.enable: true\n          starttls.enable: false\n          required: false\n# spring boot admin 配置\n\nmanagement:\n  health:\n    mail:\n      enabled: false\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  endpoint:\n    health:\n      show-details: ALWAYS', '89582063211e827622b6731f9bde20c3', '2010-05-05 00:00:00', '2023-02-25 09:45:42', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1052, 62, 'infra-server-local.yaml', 'DEFAULT_GROUP', '', '--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码\n    database: 0 # 数据库索引\n#    password: 123456 # 密码，建议生产环境开启\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9090/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n      # Spring Boot Admin Server 服务端的相关配置\n      context-path: /admin # 配置 Spring\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.infra.dal.mysql: debug\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式\n', '2869a73695b4f06dd068d767bf6613ff', '2010-05-05 00:00:00', '2023-02-25 09:56:04', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1059, 63, 'xxl-job-local.yaml', 'DEFAULT_GROUP', '', '# xxl\nxxl:\n  job:\n    i18n: zh_CN\n    logretentiondays: 30\n    login:\n      username: admin\n      password: admin\n    triggerpool:\n      fast.max: 200\n      slow.max: 200\n\n# mybatis\nmybatis:\n  mapper-locations: classpath:/mybatis-mapper/*Mapper.xml\n\n# spring\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: ${MYSQL_USER:root}\n    password: ${MYSQL_PWD:Zhang@8324761}\n    url: jdbc:mysql://localhost:3306/yudao-job?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  mvc:\n    static-path-pattern: /static/**\n  freemarker:\n    suffix: .ftl\n    request-context-attribute: request\n    settings:\n      number_format: 0.##########\n  mail:\n    host: smtp.mxhichina.com\n    port: 465\n    from: xxxx@gitee.wang\n    username: xxxx@gitee.wang\n    password: xxxx\n    properties:\n      mail:\n        smtp:\n          auth: true\n          ssl.enable: true\n          starttls.enable: false\n          required: false\n# spring boot admin 配置\n\nmanagement:\n  health:\n    mail:\n      enabled: false\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  endpoint:\n    health:\n      show-details: ALWAYS', 'bb8422a6ef78ed049669836d6d6a1b29', '2010-05-05 00:00:00', '2023-02-25 10:09:51', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1059, 64, 'xxl-job-local.yaml', 'DEFAULT_GROUP', '', '# xxl\nxxl:\n  job:\n    i18n: zh_CN\n    logretentiondays: 30\n    login:\n      username: admin\n      password: admin\n    triggerpool:\n      fast.max: 200\n      slow.max: 200\n    accessToken: defaultToken\n\n# mybatis\nmybatis:\n  mapper-locations: classpath:/mybatis-mapper/*Mapper.xml\n\n# spring\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: ${MYSQL_USER:root}\n    password: ${MYSQL_PWD:Zhang@8324761}\n    url: jdbc:mysql://localhost:3306/yudao-job?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  mvc:\n    static-path-pattern: /static/**\n  freemarker:\n    suffix: .ftl\n    request-context-attribute: request\n    settings:\n      number_format: 0.##########\n  mail:\n    host: smtp.mxhichina.com\n    port: 465\n    from: xxxx@gitee.wang\n    username: xxxx@gitee.wang\n    password: xxxx\n    properties:\n      mail:\n        smtp:\n          auth: true\n          ssl.enable: true\n          starttls.enable: false\n          required: false\n# spring boot admin 配置\n\nmanagement:\n  health:\n    mail:\n      enabled: false\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  endpoint:\n    health:\n      show-details: ALWAYS', 'b179ad0ec84be3a10e7e75de4a5ffe40', '2010-05-05 00:00:00', '2023-02-25 10:10:21', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 65, 'system-server-local.yaml', 'DEFAULT_GROUP', '', '--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n#          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n#          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n#          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n#          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n#          username: sa\n#          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n#          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n#          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n#          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n#          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n#          username: sa\n#          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n    # password: zhang8324761 # 密码，建议生产环境开启\n    database: 0 # 数据库索引\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9080/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          prefer-ip: true # 注册实例时，优先使用 IP\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.system.dal.mysql: debug\n\n--- #################### 微信公众号相关配置 ####################\nwx: # 参见 https://github.com/Wechat-Group/WxJava/blob/develop/spring-boot-starters/wx-java-mp-spring-boot-starter/README.md 文档\n  mp:\n    # 公众号配置(必填)\n    app-id: wx041349c6f39b268b\n    secret: 5abee519483bc9f8cb37ce280e814bd0\n    # 存储配置，解决 AccessToken 的跨节点的共享\n    config-storage:\n      type: RedisTemplate # 采用 RedisTemplate 操作 Redis，会自动从 Spring 中获取\n      key-prefix: wx # Redis Key 的前缀 TODO 芋艿：解决下 Redis key 管理的配置\n      http-client-type: HttpClient # 采用 HttpClient 请求微信公众号平台\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  captcha:\n    enable: false # 本地环境，暂时关闭图片验证码，方便登录等接口的测试\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  pay:\n    pay-notify-url: http://niubi.natapp1.cc/api/pay/order/notify\n    pay-return-url: http://niubi.natapp1.cc/api/pay/order/return\n    refund-notify-url: http://niubi.natapp1.cc/api/pay/refund/notify\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式\n\njustauth:\n  enabled: true\n  type:\n    DINGTALK: # 钉钉\n      client-id: dingvrnreaje3yqvzhxg\n      client-secret: i8E6iZyDvZj51JIb0tYsYfVQYOks9Cq1lgryEjFRqC79P3iJcrxEwT6Qk2QvLrLI\n      ignore-check-redirect-uri: true\n    WECHAT_ENTERPRISE: # 企业微信\n      client-id: wwd411c69a39ad2e54\n      client-secret: 1wTb7hYxnpT2TUbIeHGXGo7T0odav1ic10mLdyyATOw\n      agent-id: 1000004\n      ignore-check-redirect-uri: true\n  cache:\n    type: REDIS\n    prefix: \'social_auth_state:\' # 缓存前缀，目前只对 Redis 缓存生效，默认 JUSTAUTH::STATE::\n    timeout: 24h # 超时时长，目前只对 Redis 缓存生效，默认 3 分钟\n', '22856dca9b081ada3ab263bb7f82dc9a', '2010-05-05 00:00:00', '2023-02-25 12:17:23', NULL, '0:0:0:0:0:0:0:1', 'I', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1052, 66, 'infra-server-local.yaml', 'DEFAULT_GROUP', '', '--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码\n    database: 0 # 数据库索引\n#    password: 123456 # 密码，建议生产环境开启\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9080/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n      # Spring Boot Admin Server 服务端的相关配置\n      context-path: /admin # 配置 Spring\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.infra.dal.mysql: debug\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式\n', 'e90b0ac525302db4999725b26c5a2a95', '2010-05-05 00:00:00', '2023-02-25 12:28:47', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1055, 67, 'application-local.yaml', 'DEFAULT_GROUP', '', '# 基本配置\nspring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: infra-server # TODO 一定要写么？\n\n--- #################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      #      function:\n      #        definition: roleRefreshConsumer;roleMenuRefreshConsumer;userRoleRefreshConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        roleRefresh-out-0:\n          destination: system_role_refresh\n        roleRefreshConsumer-in-0:\n          destination: system_role_refresh\n          group: system_role_refresh_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: infra_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.infra\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  codegen:\n    base-package: cn.iocoder.yudao\n    db-schemas: ${spring.datasource.dynamic.datasource.master.name}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.infra.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n    ignore-urls:\n      - /admin-api/infra/file/*/get/** # 获取图片，和租户无关\n    ignore-tables:\n      - infra_codegen_column\n      - infra_codegen_table\n      - infra_test_demo\n      - infra_config\n      - infra_file_config\n      - infra_file\n      - infra_file_content\n      - infra_job\n      - infra_job_log\n      - infra_job_log\n      - infra_data_source_config\n\ndebug: false\n', 'be92c9d4f31d1acdca9fd24eb055ffbc', '2010-05-05 00:00:00', '2023-02-25 12:28:57', NULL, '0:0:0:0:0:0:0:1', 'D', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1066, 68, 'system-server-local.yaml', 'DEFAULT_GROUP', '', '--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n#          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n#          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n#          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n#          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n#          username: sa\n#          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n#          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n#          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n#          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n#          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n#          username: sa\n#          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n    # password: zhang8324761 # 密码，建议生产环境开启\n    database: 0 # 数据库索引\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9080/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          prefer-ip: true # 注册实例时，优先使用 IP\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.system.dal.mysql: debug\n\n--- #################### 微信公众号相关配置 ####################\nwx: # 参见 https://github.com/Wechat-Group/WxJava/blob/develop/spring-boot-starters/wx-java-mp-spring-boot-starter/README.md 文档\n  mp:\n    # 公众号配置(必填)\n    app-id: wx041349c6f39b268b\n    secret: 5abee519483bc9f8cb37ce280e814bd0\n    # 存储配置，解决 AccessToken 的跨节点的共享\n    config-storage:\n      type: RedisTemplate # 采用 RedisTemplate 操作 Redis，会自动从 Spring 中获取\n      key-prefix: wx # Redis Key 的前缀 TODO 芋艿：解决下 Redis key 管理的配置\n      http-client-type: HttpClient # 采用 HttpClient 请求微信公众号平台\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  captcha:\n    enable: false # 本地环境，暂时关闭图片验证码，方便登录等接口的测试\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  pay:\n    pay-notify-url: http://niubi.natapp1.cc/api/pay/order/notify\n    pay-return-url: http://niubi.natapp1.cc/api/pay/order/return\n    refund-notify-url: http://niubi.natapp1.cc/api/pay/refund/notify\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式\n\njustauth:\n  enabled: true\n  type:\n    DINGTALK: # 钉钉\n      client-id: dingvrnreaje3yqvzhxg\n      client-secret: i8E6iZyDvZj51JIb0tYsYfVQYOks9Cq1lgryEjFRqC79P3iJcrxEwT6Qk2QvLrLI\n      ignore-check-redirect-uri: true\n    WECHAT_ENTERPRISE: # 企业微信\n      client-id: wwd411c69a39ad2e54\n      client-secret: 1wTb7hYxnpT2TUbIeHGXGo7T0odav1ic10mLdyyATOw\n      agent-id: 1000004\n      ignore-check-redirect-uri: true\n  cache:\n    type: REDIS\n    prefix: \'social_auth_state:\' # 缓存前缀，目前只对 Redis 缓存生效，默认 JUSTAUTH::STATE::\n    timeout: 24h # 超时时长，目前只对 Redis 缓存生效，默认 3 分钟\n', '22856dca9b081ada3ab263bb7f82dc9a', '2010-05-05 00:00:00', '2023-02-25 12:29:18', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 69, 'gateway-server-local.yaml', 'DEFAULT_GROUP', '', 'spring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n\n  cloud:\n    # Spring Cloud Gateway 配置项，对应 GatewayProperties 类\n    gateway:\n      # 路由配置项，对应 RouteDefinition 数组\n      routes:\n        - id: system-admin-api # 路由的编号\n          uri: grayLb://system-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/admin-api/system/**\n          filters:\n              - RewritePath=/admin-api/system/v2/api-docs, /v2/api-docs # 配置，保证转发到 /v2/api-docs\n        - id: system-app-api # 路由的编号\n          uri: grayLb://system-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/app-api/system/**\n          filters:\n              - RewritePath=/app-api/system/v2/api-docs, /v2/api-docs\n        - id: infra-admin-api # 路由的编号\n          uri: grayLb://infra-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/admin-api/infra/**\n          filters:\n              - RewritePath=/admin-api/infra/v2/api-docs, /v2/api-docs\n        - id: infra-app-api # 路由的编号\n          uri: grayLb://infra-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/app-api/infra/**\n          filters:\n              - RewritePath=/app-api/infra/v2/api-docs, /v2/api-docs\n        - id: bpm-admin-api # 路由的编号\n          uri: grayLb://bpm-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/admin-api/bpm/**\n          filters:\n              - RewritePath=/admin-api/bpm/v2/api-docs, /v2/api-docs\n        - id: report-admin-api # 路由的编号\n          uri: grayLb://report-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/admin-api/report/**\n          filters:\n            - RewritePath=/admin-api/report/v2/api-docs, /v2/api-docs\n        - id: report-jmreport # 路由的编号（积木报表）\n          uri: grayLb://report-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/jmreport/**\n      x-forwarded:\n        prefix-enabled: false # 避免 Swagger 重复带上额外的 /admin-api/system 前缀\n', '3844285060edb34e54011426868302b2', '2010-05-05 00:00:00', '2023-02-25 15:05:30', NULL, '0:0:0:0:0:0:0:1', 'I', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 70, 'report-server-local.yaml', 'DEFAULT_GROUP', '', 'spring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: report-server # TODO 一定要写么？\n\n--- #################### MQ 消息队列相关配置 ####################\n\n--- #################### 定时任务相关配置 ####################\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.report\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.report.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n\ndebug: false\n\n--- #################### 数据库相关配置 ####################\nspring:\n\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码，建议生产环境开启\n    database: 0 # 数据库索引\n\n--- #################### MQ 消息队列相关配置 ####################\n\n--- #################### 定时任务相关配置 ####################\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.report.dal.mysql: debug\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式\n', 'abea444d6fc2a1ae589bc74b77e05d53', '2010-05-05 00:00:00', '2023-02-25 15:23:35', NULL, '0:0:0:0:0:0:0:1', 'I', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (0, 71, 'bpm-server-local.yaml', 'DEFAULT_GROUP', '', 'spring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# 工作流 Flowable 配置\nflowable:\n  # 1. false: 默认值，Flowable 启动时，对比数据库表中保存的版本，如果不匹配。将抛出异常\n  # 2. true: 启动时会对数据库中所有表进行更新操作，如果表存在，不做处理，反之，自动创建表\n  # 3. create_drop: 启动时自动创建表，关闭时自动删除表\n  # 4. drop_create: 启动时，删除旧表，再创建新表\n  database-schema-update: true # 设置为 false，可通过 https://github.com/flowable/flowable-sql 初始化\n  db-history-used: true # flowable6 默认 true 生成信息表，无需手动设置\n  check-process-definitions: false # 设置为 false，禁用 /resources/processes 自动部署 BPMN XML 流程\n  history-level: full # full：保存历史数据的最高级别，可保存全部流程相关细节，包括流程流转各节点参数\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n\n--- #################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: bpm_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.bpm\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  captcha:\n    timeout: 5m\n    width: 160\n    height: 60\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.bpm.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n\ndebug: false\n\n--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n    #    password: zhang8324761 # 密码，建议生产环境开启\n    database: 0 # 数据库索引\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9080/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.bpm.dal.mysql: debug\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  captcha:\n    enable: false # 本地环境，暂时关闭图片验证码，方便登录等接口的测试\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式', 'c3218057d775db10250e636527accbca', '2010-05-05 00:00:00', '2023-02-25 15:29:18', NULL, '0:0:0:0:0:0:0:1', 'I', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1071, 72, 'bpm-server-local.yaml', 'DEFAULT_GROUP', '', 'spring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# 工作流 Flowable 配置\nflowable:\n  # 1. false: 默认值，Flowable 启动时，对比数据库表中保存的版本，如果不匹配。将抛出异常\n  # 2. true: 启动时会对数据库中所有表进行更新操作，如果表存在，不做处理，反之，自动创建表\n  # 3. create_drop: 启动时自动创建表，关闭时自动删除表\n  # 4. drop_create: 启动时，删除旧表，再创建新表\n  database-schema-update: true # 设置为 false，可通过 https://github.com/flowable/flowable-sql 初始化\n  db-history-used: true # flowable6 默认 true 生成信息表，无需手动设置\n  check-process-definitions: false # 设置为 false，禁用 /resources/processes 自动部署 BPMN XML 流程\n  history-level: full # full：保存历史数据的最高级别，可保存全部流程相关细节，包括流程流转各节点参数\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n\n--- #################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: bpm_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.bpm\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  captcha:\n    timeout: 5m\n    width: 160\n    height: 60\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.bpm.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n\ndebug: false\n\n--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n    #    password: zhang8324761 # 密码，建议生产环境开启\n    database: 0 # 数据库索引\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9080/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.bpm.dal.mysql: debug\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  captcha:\n    enable: false # 本地环境，暂时关闭图片验证码，方便登录等接口的测试\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式', 'c3218057d775db10250e636527accbca', '2010-05-05 00:00:00', '2023-02-25 15:35:08', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1071, 73, 'bpm-server-local.yaml', 'DEFAULT_GROUP', '', 'spring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# 工作流 Flowable 配置\nflowable:\n  # 1. false: 默认值，Flowable 启动时，对比数据库表中保存的版本，如果不匹配。将抛出异常\n  # 2. true: 启动时会对数据库中所有表进行更新操作，如果表存在，不做处理，反之，自动创建表\n  # 3. create_drop: 启动时自动创建表，关闭时自动删除表\n  # 4. drop_create: 启动时，删除旧表，再创建新表\n  database-schema-update: true # 设置为 false，可通过 https://github.com/flowable/flowable-sql 初始化\n  db-history-used: true # flowable6 默认 true 生成信息表，无需手动设置\n  check-process-definitions: false # 设置为 false，禁用 /resources/processes 自动部署 BPMN XML 流程\n  history-level: full # full：保存历史数据的最高级别，可保存全部流程相关细节，包括流程流转各节点参数\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n\n--- #################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: bpm_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.bpm\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  captcha:\n    timeout: 5m\n    width: 160\n    height: 60\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.bpm.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n\ndebug: false\n\n--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6380 # 端口\n    # password: zhang8324761 # 密码，建议生产环境开启\n    database: 0 # 数据库索引\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9080/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.bpm.dal.mysql: debug\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  captcha:\n    enable: false # 本地环境，暂时关闭图片验证码，方便登录等接口的测试\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式', '7483035c68301f0347ab5f130a24b718', '2010-05-05 00:00:00', '2023-02-25 15:37:36', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1071, 74, 'bpm-server-local.yaml', 'DEFAULT_GROUP', '', 'spring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# 工作流 Flowable 配置\nflowable:\n  # 1. false: 默认值，Flowable 启动时，对比数据库表中保存的版本，如果不匹配。将抛出异常\n  # 2. true: 启动时会对数据库中所有表进行更新操作，如果表存在，不做处理，反之，自动创建表\n  # 3. create_drop: 启动时自动创建表，关闭时自动删除表\n  # 4. drop_create: 启动时，删除旧表，再创建新表\n  database-schema-update: true # 设置为 false，可通过 https://github.com/flowable/flowable-sql 初始化\n  db-history-used: true # flowable6 默认 true 生成信息表，无需手动设置\n  check-process-definitions: false # 设置为 false，禁用 /resources/processes 自动部署 BPMN XML 流程\n  history-level: full # full：保存历史数据的最高级别，可保存全部流程相关细节，包括流程流转各节点参数\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n\n--- #################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: bpm_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.bpm\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  captcha:\n    timeout: 5m\n    width: 160\n    height: 60\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.bpm.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n\ndebug: false\n\n--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  \n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n    # password: zhang8324761 # 密码，建议生产环境开启\n    database: 0 # 数据库索引\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9080/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.bpm.dal.mysql: debug\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  captcha:\n    enable: false # 本地环境，暂时关闭图片验证码，方便登录等接口的测试\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式', '05c80a96f899e1356671e412b365436f', '2010-05-05 00:00:00', '2023-02-25 15:43:39', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1071, 75, 'bpm-server-local.yaml', 'DEFAULT_GROUP', '', 'spring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# 工作流 Flowable 配置\nflowable:\n  # 1. false: 默认值，Flowable 启动时，对比数据库表中保存的版本，如果不匹配。将抛出异常\n  # 2. true: 启动时会对数据库中所有表进行更新操作，如果表存在，不做处理，反之，自动创建表\n  # 3. create_drop: 启动时自动创建表，关闭时自动删除表\n  # 4. drop_create: 启动时，删除旧表，再创建新表\n  database-schema-update: true # 设置为 false，可通过 https://github.com/flowable/flowable-sql 初始化\n  db-history-used: true # flowable6 默认 true 生成信息表，无需手动设置\n  check-process-definitions: false # 设置为 false，禁用 /resources/processes 自动部署 BPMN XML 流程\n  history-level: full # full：保存历史数据的最高级别，可保存全部流程相关细节，包括流程流转各节点参数\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n\n--- #################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: bpm_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.bpm\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  captcha:\n    timeout: 5m\n    width: 160\n    height: 60\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.bpm.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n\ndebug: false\n\n--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  \n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n    database: 0 # 数据库索引\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9080/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.bpm.dal.mysql: debug\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  captcha:\n    enable: false # 本地环境，暂时关闭图片验证码，方便登录等接口的测试\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式', '778028b75c9a2fba7681df00e4f26f38', '2010-05-05 00:00:00', '2023-02-25 15:44:31', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1071, 76, 'bpm-server-local.yaml', 'DEFAULT_GROUP', '', 'spring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# 工作流 Flowable 配置\nflowable:\n  # 1. false: 默认值，Flowable 启动时，对比数据库表中保存的版本，如果不匹配。将抛出异常\n  # 2. true: 启动时会对数据库中所有表进行更新操作，如果表存在，不做处理，反之，自动创建表\n  # 3. create_drop: 启动时自动创建表，关闭时自动删除表\n  # 4. drop_create: 启动时，删除旧表，再创建新表\n  database-schema-update: true # 设置为 false，可通过 https://github.com/flowable/flowable-sql 初始化\n  db-history-used: true # flowable6 默认 true 生成信息表，无需手动设置\n  check-process-definitions: false # 设置为 false，禁用 /resources/processes 自动部署 BPMN XML 流程\n  history-level: full # full：保存历史数据的最高级别，可保存全部流程相关细节，包括流程流转各节点参数\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n\n--- #################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: bpm_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.bpm\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  captcha:\n    timeout: 5m\n    width: 160\n    height: 60\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.bpm.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n\ndebug: false\n\n--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  \n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n    database: 0 # 数据库索引\n    password: zhang8324761\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9080/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.bpm.dal.mysql: debug\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  captcha:\n    enable: false # 本地环境，暂时关闭图片验证码，方便登录等接口的测试\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式', '1a8a24a885edd30df90f7146fbdd9c55', '2010-05-05 00:00:00', '2023-02-25 15:46:07', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1071, 77, 'bpm-server-local.yaml', 'DEFAULT_GROUP', '', 'spring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# 工作流 Flowable 配置\nflowable:\n  # 1. false: 默认值，Flowable 启动时，对比数据库表中保存的版本，如果不匹配。将抛出异常\n  # 2. true: 启动时会对数据库中所有表进行更新操作，如果表存在，不做处理，反之，自动创建表\n  # 3. create_drop: 启动时自动创建表，关闭时自动删除表\n  # 4. drop_create: 启动时，删除旧表，再创建新表\n  database-schema-update: true # 设置为 false，可通过 https://github.com/flowable/flowable-sql 初始化\n  db-history-used: true # flowable6 默认 true 生成信息表，无需手动设置\n  check-process-definitions: false # 设置为 false，禁用 /resources/processes 自动部署 BPMN XML 流程\n  history-level: full # full：保存历史数据的最高级别，可保存全部流程相关细节，包括流程流转各节点参数\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n\n--- #################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: bpm_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.bpm\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  captcha:\n    timeout: 5m\n    width: 160\n    height: 60\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.bpm.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n\ndebug: false\n\n--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  \n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n    database: 0 # 数据库索引\n    Auth:\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9080/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.bpm.dal.mysql: debug\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  captcha:\n    enable: false # 本地环境，暂时关闭图片验证码，方便登录等接口的测试\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式', '3ba44832d1cd8c7d78f7919ad0789228', '2010-05-05 00:00:00', '2023-02-25 15:47:26', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1071, 78, 'bpm-server-local.yaml', 'DEFAULT_GROUP', '', 'spring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# 工作流 Flowable 配置\nflowable:\n  # 1. false: 默认值，Flowable 启动时，对比数据库表中保存的版本，如果不匹配。将抛出异常\n  # 2. true: 启动时会对数据库中所有表进行更新操作，如果表存在，不做处理，反之，自动创建表\n  # 3. create_drop: 启动时自动创建表，关闭时自动删除表\n  # 4. drop_create: 启动时，删除旧表，再创建新表\n  database-schema-update: true # 设置为 false，可通过 https://github.com/flowable/flowable-sql 初始化\n  db-history-used: true # flowable6 默认 true 生成信息表，无需手动设置\n  check-process-definitions: false # 设置为 false，禁用 /resources/processes 自动部署 BPMN XML 流程\n  history-level: full # full：保存历史数据的最高级别，可保存全部流程相关细节，包括流程流转各节点参数\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n\n--- #################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: bpm_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.bpm\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  captcha:\n    timeout: 5m\n    width: 160\n    height: 60\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.bpm.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n\ndebug: false\n\n--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  \n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n    database: 0 # 数据库索引\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9080/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.bpm.dal.mysql: debug\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  captcha:\n    enable: false # 本地环境，暂时关闭图片验证码，方便登录等接口的测试\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式', '778028b75c9a2fba7681df00e4f26f38', '2010-05-05 00:00:00', '2023-02-25 15:49:34', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1071, 79, 'bpm-server-local.yaml', 'DEFAULT_GROUP', '', 'spring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# 工作流 Flowable 配置\nflowable:\n  # 1. false: 默认值，Flowable 启动时，对比数据库表中保存的版本，如果不匹配。将抛出异常\n  # 2. true: 启动时会对数据库中所有表进行更新操作，如果表存在，不做处理，反之，自动创建表\n  # 3. create_drop: 启动时自动创建表，关闭时自动删除表\n  # 4. drop_create: 启动时，删除旧表，再创建新表\n  database-schema-update: true # 设置为 false，可通过 https://github.com/flowable/flowable-sql 初始化\n  db-history-used: true # flowable6 默认 true 生成信息表，无需手动设置\n  check-process-definitions: false # 设置为 false，禁用 /resources/processes 自动部署 BPMN XML 流程\n  history-level: full # full：保存历史数据的最高级别，可保存全部流程相关细节，包括流程流转各节点参数\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n\n--- #################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: bpm_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.bpm\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  captcha:\n    timeout: 5m\n    width: 160\n    height: 60\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.bpm.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n\ndebug: false\n\n--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n    #    password: zhang8324761 # 密码，建议生产环境开启\n    database: 0 # 数据库索引\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9080/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.bpm.dal.mysql: debug\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  captcha:\n    enable: false # 本地环境，暂时关闭图片验证码，方便登录等接口的测试\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式\n', '955f04be75c72333e22e50ad65b78826', '2010-05-05 00:00:00', '2023-02-25 15:57:38', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1052, 80, 'infra-server-local.yaml', 'DEFAULT_GROUP', '', '# 基本配置\nspring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: infra-server # TODO 一定要写么？\n\n--- #################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      #      function:\n      #        definition: roleRefreshConsumer;roleMenuRefreshConsumer;userRoleRefreshConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        roleRefresh-out-0:\n          destination: system_role_refresh\n        roleRefreshConsumer-in-0:\n          destination: system_role_refresh\n          group: system_role_refresh_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: infra_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.infra\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  codegen:\n    base-package: cn.iocoder.yudao\n    db-schemas: ${spring.datasource.dynamic.datasource.master.name}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.infra.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n    ignore-urls:\n      - /admin-api/infra/file/*/get/** # 获取图片，和租户无关\n    ignore-tables:\n      - infra_codegen_column\n      - infra_codegen_table\n      - infra_test_demo\n      - infra_config\n      - infra_file_config\n      - infra_file\n      - infra_file_content\n      - infra_job\n      - infra_job_log\n      - infra_job_log\n      - infra_data_source_config\n\ndebug: false\n\n--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码\n    database: 0 # 数据库索引\n#    password: 123456 # 密码，建议生产环境开启\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9080/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n      # Spring Boot Admin Server 服务端的相关配置\n      context-path: /admin # 配置 Spring\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.infra.dal.mysql: debug\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式\n', '1f819047a6ff6403cf096273f83c3bbe', '2010-05-05 00:00:00', '2023-02-25 15:57:47', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1066, 81, 'system-server-local.yaml', 'DEFAULT_GROUP', '', 'spring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n\n--- #################### MQ 消息队列相关配置 ####################\n\nspring:\n  cloud:\n    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类\n    stream:\n      function:\n        definition: smsSendConsumer;mailSendConsumer;\n      # Binding 配置项，对应 BindingProperties Map\n      bindings:\n        smsSend-out-0:\n          destination: system_sms_send\n        smsSendConsumer-in-0:\n          destination: system_sms_send\n          group: system_sms_send_consumer_group\n        mailSend-out-0:\n          destination: system_mail_send\n        mailSendConsumer-in-0:\n          destination: system_mail_send\n          group: system_mail_send_consumer_group\n      # Spring Cloud Stream RocketMQ 配置项\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n        default: # 默认 bindings 全局配置\n          producer: # RocketMQ Producer 配置项，对应 RocketMQProducerProperties 类\n            group: system_producer_group # 生产者分组\n            send-type: SYNC # 发送模式，SYNC 同步\n\n    # Spring Cloud Bus 配置项，对应 BusProperties 类\n    bus:\n      enabled: true # 是否开启，默认为 true\n      id: ${spring.application.name}:${server.port} # 编号，Spring Cloud Alibaba 建议使用“应用:端口”的格式\n      destination: springCloudBus # 目标消息队列，默认为 springCloudBus\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    executor:\n      appname: ${spring.application.name} # 执行器 AppName\n      logpath: ${user.home}/logs/xxl-job/${spring.application.name} # 执行器运行日志文件存储磁盘路径\n    accessToken: default_token # 执行器通讯TOKEN\n\n--- #################### 验证码相关配置 ####################\n\naj:\n  captcha:\n    jigsaw: classpath:images/jigsaw # 滑动验证，底图路径，不配置将使用默认图片；以 classpath: 开头，取 resource 目录下路径\n    pic-click: classpath:images/pic-click # 滑动验证，底图路径，不配置将使用默认图片；以 classpath: 开头，取 resource 目录下路径\n    cache-type: redis # 缓存 local/redis...\n    cache-number: 1000 # local 缓存的阈值,达到这个值，清除缓存\n    timing-clear: 180 # local定时清除过期缓存(单位秒),设置为0代表不执行\n    type: blockPuzzle # 验证码类型 default两种都实例化。 blockPuzzle 滑块拼图 clickWord 文字点选\n    water-mark: 芋道源码 # 右下角水印文字(我的水印)，可使用 https://tool.chinaz.com/tools/unicode.aspx 中文转 Unicode，Linux 可能需要转 unicode\n    interference-options: 0 # 滑动干扰项(0/1/2)\n    req-frequency-limit-enable: false # 接口请求次数一分钟限制是否开启 true|false\n    req-get-lock-limit: 5 # 验证失败5次，get接口锁定\n    req-get-lock-seconds: 10 # 验证失败后，锁定时间间隔\n    req-get-minute-limit: 30 # get 接口一分钟内请求数限制\n    req-check-minute-limit: 60 # check 接口一分钟内请求数限制\n    req-verify-minute-limit: 60 # verify 接口一分钟内请求数限制\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.system\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  captcha:\n    enable: true # 验证码的开关，默认为 true；\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.system.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n    ignore-urls:\n      - /admin-api/system/tenant/get-id-by-name # 基于名字获取租户，不许带租户编号\n      - /admin-api/system/captcha/get-image # 获取图片验证码，和租户无关\n      - /admin-api/system/captcha/get # 获取图片验证码，和租户无关\n      - /admin-api/system/captcha/check # 校验图片验证码，和租户无关\n      - /admin-api/system/sms/callback/* # 短信回调接口，无法带上租户编号\n      - /rpc-api/system/tenant/valid # 防止递归。避免调用 /rpc-api/system/tenant/valid 接口时，又去触发 /rpc-api/system/tenant/valid 去校验\n      - /rpc-api/system/tenant/id-list # 获得租户列表的时候，无需传递租户编号\n      - /rpc-api/system/error-code/* # 错误码的自动创建与下载的接口，无法带上租户编号\n      - /rpc-api/system/oauth2/token/check # 访问令牌校验时，无需传递租户编号；主要解决上传文件的场景，前端不会传递 tenant-id！\n    ignore-tables:\n      - system_tenant\n      - system_tenant_package\n      - system_dict_data\n      - system_dict_type\n      - system_error_code\n      - system_menu\n      - system_sms_channel\n      - system_sms_template\n      - system_sms_log\n      - system_sensitive_word\n      - system_oauth2_client\n      - system_mail_account\n      - system_mail_template\n      - system_mail_log\n      - system_notify_template\n  sms-code: # 短信验证码相关的配置项\n    expire-times: 10m\n    send-frequency: 1m\n    send-maximum-quantity-per-day: 10\n    begin-code: 9999 # 这里配置 9999 的原因是，测试方便。\n    end-code: 9999 # 这里配置 9999 的原因是，测试方便。\n\ndebug: false\n\n--- #################### 数据库相关配置 ####################\nspring:\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n#          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n#          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n#          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n#          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n#          username: sa\n#          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&allowPublicKeyRetrieval=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n#          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n#          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n#          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n#          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n#          username: sa\n#          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n    # password: zhang8324761 # 密码，建议生产环境开启\n    database: 0 # 数据库索引\n\n--- #################### MQ 消息队列相关配置 ####################\nspring:\n  cloud:\n    stream:\n      rocketmq:\n        # RocketMQ Binder 配置项，对应 RocketMQBinderConfigurationProperties 类\n        binder:\n          name-server: 127.0.0.1:9876 # RocketMQ Namesrv 地址\n\n--- #################### 定时任务相关配置 ####################\n\nxxl:\n  job:\n    admin:\n      addresses: http://127.0.0.1:9080/xxl-job-admin # 调度中心部署跟地址\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          prefer-ip: true # 注册实例时，优先使用 IP\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.system.dal.mysql: debug\n\n--- #################### 微信公众号相关配置 ####################\nwx: # 参见 https://github.com/Wechat-Group/WxJava/blob/develop/spring-boot-starters/wx-java-mp-spring-boot-starter/README.md 文档\n  mp:\n    # 公众号配置(必填)\n    app-id: wx041349c6f39b268b\n    secret: 5abee519483bc9f8cb37ce280e814bd0\n    # 存储配置，解决 AccessToken 的跨节点的共享\n    config-storage:\n      type: RedisTemplate # 采用 RedisTemplate 操作 Redis，会自动从 Spring 中获取\n      key-prefix: wx # Redis Key 的前缀 TODO 芋艿：解决下 Redis key 管理的配置\n      http-client-type: HttpClient # 采用 HttpClient 请求微信公众号平台\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  captcha:\n    enable: false # 本地环境，暂时关闭图片验证码，方便登录等接口的测试\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  pay:\n    pay-notify-url: http://niubi.natapp1.cc/api/pay/order/notify\n    pay-return-url: http://niubi.natapp1.cc/api/pay/order/return\n    refund-notify-url: http://niubi.natapp1.cc/api/pay/refund/notify\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式\n\njustauth:\n  enabled: true\n  type:\n    DINGTALK: # 钉钉\n      client-id: dingvrnreaje3yqvzhxg\n      client-secret: i8E6iZyDvZj51JIb0tYsYfVQYOks9Cq1lgryEjFRqC79P3iJcrxEwT6Qk2QvLrLI\n      ignore-check-redirect-uri: true\n    WECHAT_ENTERPRISE: # 企业微信\n      client-id: wwd411c69a39ad2e54\n      client-secret: 1wTb7hYxnpT2TUbIeHGXGo7T0odav1ic10mLdyyATOw\n      agent-id: 1000004\n      ignore-check-redirect-uri: true\n  cache:\n    type: REDIS\n    prefix: \'social_auth_state:\' # 缓存前缀，目前只对 Redis 缓存生效，默认 JUSTAUTH::STATE::\n    timeout: 24h # 超时时长，目前只对 Redis 缓存生效，默认 3 分钟\n', '6e37f441f0efc2f65bf2b1916c06838b', '2010-05-05 00:00:00', '2023-02-25 15:58:06', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1069, 82, 'gateway-server-local.yaml', 'DEFAULT_GROUP', '', 'spring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n\n  cloud:\n    # Spring Cloud Gateway 配置项，对应 GatewayProperties 类\n    gateway:\n      # 路由配置项，对应 RouteDefinition 数组\n      routes:\n        - id: system-admin-api # 路由的编号\n          uri: grayLb://system-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/admin-api/system/**\n          filters:\n              - RewritePath=/admin-api/system/v2/api-docs, /v2/api-docs # 配置，保证转发到 /v2/api-docs\n        - id: system-app-api # 路由的编号\n          uri: grayLb://system-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/app-api/system/**\n          filters:\n              - RewritePath=/app-api/system/v2/api-docs, /v2/api-docs\n        - id: infra-admin-api # 路由的编号\n          uri: grayLb://infra-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/admin-api/infra/**\n          filters:\n              - RewritePath=/admin-api/infra/v2/api-docs, /v2/api-docs\n        - id: infra-app-api # 路由的编号\n          uri: grayLb://infra-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/app-api/infra/**\n          filters:\n              - RewritePath=/app-api/infra/v2/api-docs, /v2/api-docs\n        - id: bpm-admin-api # 路由的编号\n          uri: grayLb://bpm-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/admin-api/bpm/**\n          filters:\n              - RewritePath=/admin-api/bpm/v2/api-docs, /v2/api-docs\n        - id: report-admin-api # 路由的编号\n          uri: grayLb://report-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/admin-api/report/**\n          filters:\n            - RewritePath=/admin-api/report/v2/api-docs, /v2/api-docs\n        - id: report-jmreport # 路由的编号（积木报表）\n          uri: grayLb://report-server\n          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组\n            - Path=/jmreport/**\n      x-forwarded:\n        prefix-enabled: false # 避免 Swagger 重复带上额外的 /admin-api/system 前缀\n', '3844285060edb34e54011426868302b2', '2010-05-05 00:00:00', '2023-02-25 15:58:19', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1070, 83, 'report-server-local.yaml', 'DEFAULT_GROUP', '', 'spring:\n  main:\n    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。\n    allow-bean-definition-overriding: true # 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务\n\n  # Servlet 配置\n  servlet:\n    # 文件上传相关配置项\n    multipart:\n      max-file-size: 16MB # 单个文件大小\n      max-request-size: 32MB # 设置总上传的文件大小\n  mvc:\n    pathmatch:\n      matching-strategy: ANT_PATH_MATCHER # 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类\n\n  # Jackson 配置项\n  jackson:\n    serialization:\n      write-dates-as-timestamps: true # 设置 LocalDateTime 的格式，使用时间戳\n      write-date-timestamps-as-nanoseconds: false # 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401\n      write-durations-as-timestamps: true # 设置 Duration 的格式，使用时间戳\n      fail-on-empty-beans: false # 允许序列化无属性的 Bean\n\n  # Cache 配置项\n  cache:\n    type: REDIS\n    redis:\n      time-to-live: 1h # 设置过期时间为 1 小时\n\n# MyBatis Plus 的配置项\nmybatis-plus:\n  configuration:\n    map-underscore-to-camel-case: true # 虽然默认为 true ，但是还是显示去指定下。\n  global-config:\n    db-config:\n      # 重要说明：如果将配置放到 Nacos 时，请注意将 id-type 设置为对应 DB 的类型，否则会报错；详细见 https://gitee.com/zhijiantianya/yudao-cloud/issues/I5W2N0 讨论\n      id-type: NONE # “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。\n#      id-type: AUTO # 自增 ID，适合 MySQL 等直接自增的数据库\n#      id-type: INPUT # 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库\n#      id-type: ASSIGN_ID # 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解\n      logic-delete-value: 1 # 逻辑已删除值(默认为 1)\n      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)\n  type-aliases-package: ${yudao.info.base-package}.dal.dataobject\n  encryptor:\n    password: XDV71a+xqStEA3WH # 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成\n\n--- #################### RPC 远程调用相关配置 ####################\ndubbo:\n  scan:\n    base-packages: ${yudao.info.base-package}.api # 指定 Dubbo 服务实现类的扫描基准包\n  protocol:\n    name: dubbo # 协议名称\n    port: -1 # 协议端口，-1 表示自增端口，从 20880 开始\n  registry:\n    address: spring-cloud://localhost # 设置使用 Spring Cloud 注册中心\n  application:\n    id: report-server # TODO 一定要写么？\n\n--- #################### MQ 消息队列相关配置 ####################\n\n--- #################### 定时任务相关配置 ####################\n\n--- #################### 芋道相关配置 ####################\n\nyudao:\n  info:\n    version: 1.0.0\n    base-package: cn.iocoder.yudao.module.report\n  web:\n    admin-ui:\n      url: http://dashboard.yudao.iocoder.cn # Admin 管理后台 UI 的地址\n  swagger:\n    title: 管理后台\n    description: 提供管理员管理的所有功能\n    version: ${yudao.info.version}\n    base-package: ${yudao.info.base-package}\n  error-code: # 错误码相关配置项\n    constants-class-list:\n      - cn.iocoder.yudao.module.report.enums.ErrorCodeConstants\n  tenant: # 多租户相关配置项\n    enable: true\n\ndebug: false\n\n--- #################### 数据库相关配置 ####################\nspring:\n\n  # 数据源配置项\n  autoconfigure:\n    exclude:\n      - com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure # 排除 Druid 的自动配置，使用 dynamic-datasource-spring-boot-starter 配置多数据源\n  datasource:\n    druid: # Druid 【监控】相关的全局配置\n      web-stat-filter:\n        enabled: true\n      stat-view-servlet:\n        enabled: true\n        allow: # 设置白名单，不填则允许所有访问\n        url-pattern: /druid/*\n        login-username: # 控制台管理用户名和密码\n        login-password:\n      filter:\n        stat:\n          enabled: true\n          log-slow-sql: true # 慢 SQL 记录\n          slow-sql-millis: 100\n          merge-sql: true\n        wall:\n          config:\n            multi-statement-allow: true\n    dynamic: # 多数据源配置\n      druid: # Druid 【连接池】相关的全局配置\n        initial-size: 5 # 初始连接数\n        min-idle: 10 # 最小连接池数量\n        max-active: 20 # 最大连接池数量\n        max-wait: 600000 # 配置获取连接等待超时的时间，单位：毫秒\n        time-between-eviction-runs-millis: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位：毫秒\n        min-evictable-idle-time-millis: 300000 # 配置一个连接在池中最小生存的时间，单位：毫秒\n        max-evictable-idle-time-millis: 900000 # 配置一个连接在池中最大生存的时间，单位：毫秒\n        validation-query: SELECT 1 FROM DUAL # 配置检测连接是否有效\n        test-while-idle: true\n        test-on-borrow: false\n        test-on-return: false\n      primary: master\n      datasource:\n        master:\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.master.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.master.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n        #          username: sa\n        #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n        slave: # 模拟从库，可根据自己需要修改\n          name: ruoyi-vue-pro\n          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?allowMultiQueries=true&useUnicode=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai&autoReconnect=true&nullCatalogMeansCurrent=true # MySQL Connector/J 8.X 连接的示例\n          #          url: jdbc:mysql://127.0.0.1:3306/${spring.datasource.dynamic.datasource.slave.name}?useSSL=false&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=CTT # MySQL Connector/J 5.X 连接的示例\n          #          url: jdbc:postgresql://127.0.0.1:5432/${spring.datasource.dynamic.datasource.slave.name} # PostgreSQL 连接的示例\n          #          url: jdbc:oracle:thin:@127.0.0.1:1521:xe # Oracle 连接的示例\n          #          url: jdbc:sqlserver://127.0.0.1:1433;DatabaseName=${spring.datasource.dynamic.datasource.slave.name} # SQLServer 连接的示例\n          username: root\n          password: Zhang@8324761\n  #          username: sa\n  #          password: JSm:g(*%lU4ZAkz06cd52KqT3)i1?H7W\n\n  # Redis 配置。Redisson 默认的配置足够使用，一般不需要进行调优\n  redis:\n    host: 127.0.0.1 # 地址\n    port: 6379 # 端口\n#    password: zhang8324761 # 密码，建议生产环境开启\n    database: 0 # 数据库索引\n\n--- #################### MQ 消息队列相关配置 ####################\n\n--- #################### 定时任务相关配置 ####################\n\n--- #################### 服务保障相关配置 ####################\n\n# Lock4j 配置项\nlock4j:\n  acquire-timeout: 3000 # 获取分布式锁超时时间，默认为 3000 毫秒\n  expire: 30000 # 分布式锁的超时时间，默认为 30 毫秒\n\n--- #################### 监控相关配置 ####################\n\n# Actuator 监控端点的配置项\nmanagement:\n  endpoints:\n    web:\n      base-path: /actuator # Actuator 提供的 API 接口的根目录。默认为 /actuator\n      exposure:\n        include: \'*\' # 需要开放的端点。默认值只打开 health 和 info 两个端点。通过设置 * ，可以开放所有端点。\n\n# Spring Boot Admin 配置项\nspring:\n  boot:\n    admin:\n      # Spring Boot Admin Client 客户端的相关配置\n      client:\n        url: http://127.0.0.1:${server.port}/${spring.boot.admin.context-path} # 设置 Spring Boot Admin Server 地址\n        instance:\n          service-host-type: IP # 注册实例时，优先使用 IP [IP, HOST_NAME, CANONICAL_HOST_NAME]\n\n# 日志文件配置\nlogging:\n  level:\n    # 配置自己写的 MyBatis Mapper 打印日志\n    cn.iocoder.yudao.module.report.dal.mysql: debug\n\n--- #################### 芋道相关配置 ####################\n\n# 芋道配置项，设置当前项目所有自定义的配置\nyudao:\n  env: # 多环境的配置项\n    tag: ${HOSTNAME}\n  security:\n    mock-enable: true\n  xss:\n    enable: false\n    exclude-urls: # 如下两个 url，仅仅是为了演示，去掉配置也没关系\n      - ${spring.boot.admin.context-path}/** # 不处理 Spring Boot Admin 的请求\n      - ${management.endpoints.web.base-path}/** # 不处理 Actuator 的请求\n  access-log: # 访问日志的配置项\n    enable: false\n  error-code: # 错误码相关配置项\n    enable: false\n  demo: false # 关闭演示模式\n', 'abea444d6fc2a1ae589bc74b77e05d53', '2010-05-05 00:00:00', '2023-02-25 15:59:03', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
INSERT INTO `his_config_info` (`id`, `nid`, `data_id`, `group_id`, `app_name`, `content`, `md5`, `gmt_create`, `gmt_modified`, `src_user`, `src_ip`, `op_type`, `tenant_id`) VALUES (1059, 84, 'xxl-job-local.yaml', 'DEFAULT_GROUP', '', '# xxl\nxxl:\n  job:\n    i18n: zh_CN\n    logretentiondays: 30\n    login:\n      username: admin\n      password: admin\n    triggerpool:\n      fast.max: 200\n      slow.max: 200\n    accessToken: default_token\n\n# mybatis\nmybatis:\n  mapper-locations: classpath:/mybatis-mapper/*Mapper.xml\n\n# spring\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    username: ${MYSQL_USER:root}\n    password: ${MYSQL_PWD:Zhang@8324761}\n    url: jdbc:mysql://localhost:3306/yudao-job?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2B8&allowMultiQueries=true&allowPublicKeyRetrieval=true\n  mvc:\n    static-path-pattern: /static/**\n  freemarker:\n    suffix: .ftl\n    request-context-attribute: request\n    settings:\n      number_format: 0.##########\n  mail:\n    host: smtp.mxhichina.com\n    port: 465\n    from: xxxx@gitee.wang\n    username: xxxx@gitee.wang\n    password: xxxx\n    properties:\n      mail:\n        smtp:\n          auth: true\n          ssl.enable: true\n          starttls.enable: false\n          required: false\n# spring boot admin 配置\n\nmanagement:\n  health:\n    mail:\n      enabled: false\n  endpoints:\n    web:\n      exposure:\n        include: \'*\'\n  endpoint:\n    health:\n      show-details: ALWAYS', 'f272e4685f8a7f8eff96a7e8259f5f0a', '2010-05-05 00:00:00', '2023-03-01 07:59:02', 'nacos', '0:0:0:0:0:0:0:1', 'U', 'dev');
COMMIT;

-- ----------------------------
-- Table structure for permissions
-- ----------------------------
DROP TABLE IF EXISTS `permissions`;
CREATE TABLE `permissions` (
  `role` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `resource` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `action` varchar(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  UNIQUE KEY `uk_role_permission` (`role`,`resource`,`action`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- ----------------------------
-- Records of permissions
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for roles
-- ----------------------------
DROP TABLE IF EXISTS `roles`;
CREATE TABLE `roles` (
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `role` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  UNIQUE KEY `uk_username_role` (`username`,`role`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- ----------------------------
-- Records of roles
-- ----------------------------
BEGIN;
INSERT INTO `roles` (`username`, `role`) VALUES ('nacos', 'ROLE_ADMIN');
COMMIT;

-- ----------------------------
-- Table structure for tenant_capacity
-- ----------------------------
DROP TABLE IF EXISTS `tenant_capacity`;
CREATE TABLE `tenant_capacity` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `tenant_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL DEFAULT '' COMMENT 'Tenant ID',
  `quota` int unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
  `usage` int unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
  `max_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数',
  `max_aggr_size` int unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `uk_tenant_id` (`tenant_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin COMMENT='租户容量信息表';

-- ----------------------------
-- Records of tenant_capacity
-- ----------------------------
BEGIN;
COMMIT;

-- ----------------------------
-- Table structure for tenant_info
-- ----------------------------
DROP TABLE IF EXISTS `tenant_info`;
CREATE TABLE `tenant_info` (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `kp` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL COMMENT 'kp',
  `tenant_id` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT '' COMMENT 'tenant_id',
  `tenant_name` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT '' COMMENT 'tenant_name',
  `tenant_desc` varchar(256) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'tenant_desc',
  `create_source` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL COMMENT 'create_source',
  `gmt_create` bigint NOT NULL COMMENT '创建时间',
  `gmt_modified` bigint NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`) USING BTREE,
  KEY `idx_tenant_id` (`tenant_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin COMMENT='tenant_info';

-- ----------------------------
-- Records of tenant_info
-- ----------------------------
BEGIN;
INSERT INTO `tenant_info` (`id`, `kp`, `tenant_id`, `tenant_name`, `tenant_desc`, `create_source`, `gmt_create`, `gmt_modified`) VALUES (2, '1', 'dev', 'dev', '开发环境', 'nacos', 1677316209093, 1677316234353);
COMMIT;

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `password` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `enabled` tinyint(1) NOT NULL,
  PRIMARY KEY (`username`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- ----------------------------
-- Records of users
-- ----------------------------
BEGIN;
INSERT INTO `users` (`username`, `password`, `enabled`) VALUES ('nacos', '$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu', 1);
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
